<html>

<head>
  <title>15.5 其他一些技巧（Other Facilities） - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;15.5 其他一些技巧（Other Facilities）</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>正如前面我所说的，用表来实现</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>过程中可以使用</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的所有强大的功能。这里面有无限的可能性。在这里，我只给出一些建议。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>我们不需要将</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的所有公有成员的定义放在一起，例如，我们可以在一个独立分开的</span><span
lang=EN-US>chunk</span><span style='font-family:宋体'>中给我们的复数</span><span
lang=EN-US>package</span><span style='font-family:宋体'>增加一个新的函数：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,247,235)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> complex.div (c1,
c2)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
complex.mul(c1, complex.inv(c2))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,233,222)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（但是注意：私有成员必须限制在一个文件之内，我认为这是一件好事）反过来，我们可以在同一个文件之内定义多个</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>，我们需要做的只是将每一个</span><span
lang=EN-US>package</span><span style='font-family:宋体'>放在一个</span><span
lang=EN-US>do</span><span style='font-family:宋体'>代码块内，这样</span><span
lang=EN-US>local</span><span style='font-family:宋体'>变量才能被限制在那个代码块中。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在</span><span
lang=EN-US>package</span><span style='font-family:宋体'>外部，如果我们需要经常使用某个函数，我们可以给他们定义一个局部变量名：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,244,225)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> add, i =
complex.add, complex.i</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>c1 = add(complex.new(10, 20), i)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>如果我们不想一遍又一遍的重写</span><span
lang=EN-US>package</span><span style='font-family:宋体'>名，我们用一个短的局部变量表示</span><span
lang=EN-US>package</span><span style='font-family:宋体'>：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(241,244,245);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>local C = complex</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,226,235)'><span
lang=EN-US>c1 = C.add(C.new(10, 20), C.i)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>写一个函数拆开</span><span
lang=EN-US>package</span><span style='font-family:宋体'>也是很容易的，将</span><span
lang=EN-US>package</span><span style='font-family:宋体'>中所有的名字放到全局命名空间即可：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,253,225)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> openpackage (ns)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>for</span> n,v <span
style='color:blue'>in</span> pairs(ns) <span style='color:blue'>do</span> _G[n]
= v <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,237,250)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,240,253)'><span
lang=EN-US>openpackage(complex)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>c1 = mul(new(10, 20), i)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>如果你担心打开</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的时候会有命名冲突，可以在赋值以前检查一下名字是否存在：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(228,225,234);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> openpackage (ns)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,232,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>for</span> n,v <span
style='color:blue'>in</span> pairs(ns) <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
_G[n] ~= <span style='color:blue'>nil</span> <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,232,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(<span
style='color:red'>&quot;name clash: &quot;</span> .. n .. <span
style='color:red'>&quot; is already defined&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,233,220)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _G[n] = v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,255,254)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>由于</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>本身也是表，我们甚至可以在</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>中嵌套</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>；也就是说我们在一个</span><span
lang=EN-US>package</span><span style='font-family:宋体'>内还可以创建</span><span
lang=EN-US>package</span><span style='font-family:宋体'>，然后很少有必要这么做。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>另一个有趣之处是自动加载：函数只有被实际使用的时候才会自动加载。当我们加载一个自动加载的</span><span
lang=EN-US>package</span><span style='font-family:宋体'>，会自动创建一个新的空表来表示</span><span
lang=EN-US>package</span><span style='font-family:宋体'>并且设置表的</span><span
lang=EN-US>__index metamethod</span><span style='font-family:宋体'>来完成自动加载。当我们调用任何一个没有被加载的函数的时候，</span><span
lang=EN-US>__index metamethod</span><span style='font-family:宋体'>将被触发去加载着个函数。当调用发现函数已经被加载，</span><span
lang=EN-US>__index</span><span style='font-family:宋体'>将不会被触发。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面有一个简单的实现自动加载的方法。每一个函数定义在一个辅助文件中。</span><span
lang=EN-US>(</span><span style='font-family:宋体'>也可能一个文件内有多个函数</span><span
lang=EN-US>)</span><span style='font-family:宋体'>这些文件中的每一个都以标准的方式定义函数，例如：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,239,240)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> pack1.foo ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; ...</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,228,243)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,245,237)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> pack1.goo ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; ...</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,236,230)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>然而，文件并不会创建</span><span
lang=EN-US>package</span><span style='font-family:宋体'>，因为当函数被加载的时候</span><span
lang=EN-US>package</span><span style='font-family:宋体'>已经存在了。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在主</span><span
lang=EN-US>package</span><span style='font-family:宋体'>中我们定义一个辅助表来记录函数存放的位置：</span><span
lang=EN-US> </span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,253,255)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> location = {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; foo = <span style='color:red'>&quot;/usr/local/lua/lib/pack1_1.lua&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,245,222)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; goo = <span style='color:red'>&quot;/usr/local/lua/lib/pack1_1.lua&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; foo1 = <span style='color:red'>&quot;/usr/local/lua/lib/pack1_2.lua&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,246,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; goo1 = <span style='color:red'>&quot;/usr/local/lua/lib/pack1_3.lua&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面我们创建</span><span
lang=EN-US>package</span><span style='font-family:宋体'>并且定义她的</span><span
lang=EN-US>metamethod</span><span style='font-family:宋体'>：</span></p>

<div style='border:RGB(79,129,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(243,250,221);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>pack1 = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,234,233)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setmetatable(pack1, {__index = <span style='color:blue'>function</span>
(t, funcname)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,249,240)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> file =
location[funcname]</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> <span
style='color:blue'>not</span> file <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,225,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; error(<span style='color:red'>&quot;package pack1
does not define &quot;</span> .. funcname)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,253,233)'><span
lang=EN-US>assert(loadfile(file))()&nbsp;&nbsp;&nbsp; <span style='color:green'>--
load and run definition</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> t[funcname]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- return the function</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,234,223)'><span
lang=EN-US style='color:blue'>end</span><span lang=EN-US>})</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,221,220)'><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> pack1</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>加载这个</span><span
lang=EN-US>package</span><span style='font-family:宋体'>之后，第一次程序执行</span><span
lang=EN-US>pack1.foo()</span><span style='font-family:宋体'>将触发</span><span
lang=EN-US>__index metamethod</span><span style='font-family:宋体'>，接着发现函数有一个相应的文件，并加载这个文件。微妙之处在于：加载了文件，同时返回函数作为访问的结果。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>因为整个系统（译者：这里可能指复数吧？）都使用</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>写的，所以很容易改变系统的行为。例如，函数可以是用</span><span
lang=EN-US>C</span><span style='font-family:宋体'>写的，在</span><span lang=EN-US>metamethod</span><span
style='font-family:宋体'>中用</span><span lang=EN-US>loadlib</span><span
style='font-family:宋体'>加载他。或者我们我们可以在全局表中设定一个</span><span lang=EN-US>metamethod</span><span
style='font-family:宋体'>来自动加载整个</span><span lang=EN-US>packages.</span><span
style='font-family:宋体'>这里有无限的可能等着你去发掘。</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section24 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

