<html>

<head>
  <title>17.1 记忆函数 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;17.1 记忆函数</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一个相当普遍的编程技术是用空间来换取时间。你可以通过记忆函数结果来进行优化，当你用同样的参数再次调用函数时，它可以自动返回记忆的结果。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>想像一下一个通用的服务器，接收包含</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>代码的字符串请求。每当它收到一个请求，它调用</span><span
lang=EN-US>loadstring</span><span style='font-family:宋体'>加载字符串，然后调用函数进行处理。然而，</span><span
lang=EN-US>loadstring</span><span style='font-family:宋体'>是一个“巨大”的函数，一些命令在服务器中会频繁地使用。不需要反复调用</span><span
lang=EN-US>loadstring</span><span style='font-family:宋体'>和后面接着的</span><span
lang=EN-US>closeconnection</span><span style='font-family:宋体'>（），服务器可以通过使用一个辅助</span><span
lang=EN-US>table</span><span style='font-family:宋体'>来记忆</span><span lang=EN-US>loadstring</span><span
style='font-family:宋体'>的结果。在调用</span><span lang=EN-US>loadstring</span><span
style='font-family:宋体'>之前，服务器会在这个</span><span lang=EN-US>table</span><span
style='font-family:宋体'>中寻找这个字符串是否已经有了翻译好的结果。如果没有找到，那么（而且只是这个情况）服务器会调用</span><span
lang=EN-US>loadstring</span><span style='font-family:宋体'>并把这次的结果存入辅助</span><span
lang=EN-US>table</span><span style='font-family:宋体'>。我们可以将这个操作包装为一个函数：</span></p>

<div style='border:RGB(127,176,226) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,223,240)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> results = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> mem_loadstring
(s)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,232,234)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> results[s] <span
style='color:blue'>then</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- result available?</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
results[s]&nbsp;&nbsp;&nbsp; <span style='color:green'>-- reuse it</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,241,232)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span>
res = loadstring(s)&nbsp;&nbsp; <span style='color:green'>-- compute new result</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,226,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; results[s] = res&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- save for later reuse</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
res</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(234,220,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个方案的存储消耗可能是巨大的。尽管如此，它仍然可能会导致意料之外的数据冗余。尽管一些命令一遍遍的重复执行，但有些命令可能只运行一次。渐渐地，这个</span><span
lang=EN-US>table</span><span style='font-family:宋体'>积累了服务器所有命令被调用处理后的结果；早晚有一天，它会挤爆服务器的内存。一个</span><span
lang=EN-US>weak table</span><span style='font-family:宋体'>提供了对于这个问题的简单解决方案。如果这个结果表中有</span><span
lang=EN-US>weak</span><span style='font-family:宋体'>值，每次的垃圾收集循环都会移除当前时间内所有未被使用的结果（通常是差不多全部）：</span></p>

<div style='border:RGB(127,176,226) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(253,246,238);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> results = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,252,221)'><span
lang=EN-US>setmetatable(results, {__mode = \&quot;v\&quot;})&nbsp;&nbsp; <span
style='color:green'>-- make values weak</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> mem_loadstring
(s)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,223,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; ...&nbsp;&nbsp;&nbsp; <span style='color:green'>--
as before</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>事实上，因为</span><span
lang=EN-US>table</span><span style='font-family:宋体'>的索引下标经常是字符串式的，如果愿意，我们可以将</span><span
lang=EN-US>table</span><span style='font-family:宋体'>全部置</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>：</span></p>

<div style='border:RGB(127,176,226) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,241,226)'><span
lang=EN-US>setmetatable(results, {__mode = \&quot;kv\&quot;})</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最终结果是完全一样的。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>记忆技术在保持一些类型对象的唯一性上同样有用。例如，假如一个系统将通过</span><span
lang=EN-US>tables</span><span style='font-family:宋体'>表达颜色，通过有一定组合方式的红色，绿色，蓝色。一个自然颜色调色器通过每一次新的请求产生新的颜色：</span></p>

<div style='border:RGB(127,176,226) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,255,233)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> createRGB (r, g,
b)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> {red = r,
green = g, blue = b}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,240,239)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用记忆技术，我们可以将同样的颜色结果存储在同一个</span><span
lang=EN-US>table</span><span style='font-family:宋体'>中。为了建立每一种颜色唯一的</span><span
lang=EN-US>key</span><span style='font-family:宋体'>，我们简单的使用一个分隔符连接颜色索引下标：</span></p>

<div style='border:RGB(127,176,226) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,224,233)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> results = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setmetatable(results, {__mode = \&quot;v\&quot;})&nbsp;&nbsp; <span
style='color:green'>-- make values weak</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,242,234)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> createRGB (r, g,
b)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> key = r ..
\&quot;-\&quot; .. g .. \&quot;-\&quot; .. b</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,237,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> results[key] <span
style='color:blue'>then</span> <span style='color:blue'>return</span>
results[key]</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,225,247)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span>
newcolor = {red = r, green = g, blue = b}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; results[key] = newcolor</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,235,248)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
newcolor</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,233,242)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一个有趣的后果就是，用户可以使用这个原始的等号运算符比对操作来辨别颜色，因为两个同时存在的颜色通过同一个的</span><span
lang=EN-US>table</span><span style='font-family:宋体'>来表达。要注意，同样的颜色可能在不同的时间通过不同的</span><span
lang=EN-US>tales</span><span style='font-family:宋体'>来表达，因为垃圾收集器一次次的在清理结果</span><span
lang=EN-US>table</span><span style='font-family:宋体'>。然而，只要给定的颜色正在被使用，它就不会从结果中被移除。所以，任何时候一个颜色在同其他颜色进行比较的时候存活的够久，它的结果镜像也同样存活。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

