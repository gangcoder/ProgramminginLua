<html>

<head>
  <title>20.1 模式匹配函数 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;20.1 模式匹配函数</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在</span><span
lang=EN-US>string</span><span style='font-family:宋体'>库中功能最强大的函数是：</span><span
lang=EN-US>string.find</span><span style='font-family:宋体'>（字符串查找），</span><span
lang=EN-US>string.gsub</span><span style='font-family:宋体'>（全局字符串替换），</span><span
lang=EN-US>and string.gfind</span><span style='font-family:宋体'>（全局字符串查找）。这些函数都是基于模式匹配的。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>与其他脚本语言不同的是，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>并不使用</span><span lang=EN-US>POSIX</span><span
style='font-family:宋体'>规范的正则表达式</span><a href="#_ftn4" name="_ftnref4" title=""><span
class=MsoFootnoteReference><span lang=EN-US><span class=MsoFootnoteReference><span
lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'>[4]</span></span></span></span></a><span
style='font-family:宋体'>（也写作</span><span lang=EN-US>regexp</span><span
style='font-family:宋体'>）来进行模式匹配。主要的原因出于程序大小方面的考虑：实现一个典型的符合</span><span
lang=EN-US>POSIX</span><span style='font-family:宋体'>标准的</span><span lang=EN-US>regexp</span><span
style='font-family:宋体'>大概需要</span><span lang=EN-US>4000</span><span
style='font-family:宋体'>行代码，这比整个</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>标准库加在一起都大。权衡之下，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中的模式匹配的实现只用了</span><span lang=EN-US>500</span><span
style='font-family:宋体'>行代码，当然这意味着不可能实现</span><span lang=EN-US>POSIX</span><span
style='font-family:宋体'>所规范的所有更能。然而，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中的模式匹配功能是很强大的，并且包含了一些使用标准</span><span lang=EN-US>POSIX</span><span
style='font-family:宋体'>模式匹配不容易实现的功能。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>string.find</span><span
style='font-family:宋体'>的基本应用就是用来在目标串（</span><span lang=EN-US>subject string</span><span
style='font-family:宋体'>）内搜索匹配指定的模式的串。函数如果找到匹配的串返回他的位置，否则返回</span><span
lang=EN-US>nil.</span><span style='font-family:宋体'>最简单的模式就是一个单词，仅仅匹配单词本身。比如，模式</span><span
lang=EN-US>'hello'</span><span style='font-family:宋体'>仅仅匹配目标串中的</span><span
lang=EN-US>&quot;hello&quot;</span><span style='font-family:宋体'>。当查找到模式的时候，函数返回两个值：匹配串开始索引和结束索引。</span></p>

<div style='border:RGB(216,100,253) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,250,254)'><span
lang=EN-US>s = <span style='color:red'>&quot;hello world&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>i, j = string.find(s, <span style='color:red'>&quot;hello&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,239,230)'><span
lang=EN-US>print(i, j)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 1&nbsp;&nbsp;&nbsp; 5</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(string.sub(s, i, j))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; hello</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,252,250)'><span
lang=EN-US>print(string.find(s, <span style='color:red'>&quot;world&quot;</span>))&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 7&nbsp;&nbsp;&nbsp; 11</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>i, j = string.find(s, <span style='color:red'>&quot;l&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,248,221)'><span
lang=EN-US>print(i, j)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 3&nbsp;&nbsp;&nbsp; 3</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(string.find(s, <span style='color:red'>&quot;lll&quot;</span>))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; nil</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>例子中，匹配成功的时候，</span><span
lang=EN-US>string.sub</span><span style='font-family:宋体'>利用</span><span
lang=EN-US>string.find</span><span style='font-family:宋体'>返回的值截取匹配的子串。（对简单模式而言，匹配的就是其本身）</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>string.find</span><span
style='font-family:宋体'>函数第三个参数是可选的：标示目标串中搜索的起始位置。当我们想查找目标串中所有匹配的子串的时候，这个选项非常有用。我们可以不断的循环搜索，每一次从前一次匹配的结束位置开始。下面看一个例子，下面的代码用一个字符串中所有的新行构造一个表：</span></p>

<div style='border:RGB(216,100,253) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(250,234,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> t = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- table to store the indices</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,239,246)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> i = 0</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> <span
style='color:blue'>true</span> <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(225,250,234)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; i = string.find(s, <span style='color:red'>&quot;\n&quot;</span>,
i+1)&nbsp;&nbsp; <span style='color:green'>-- find 'next' newline</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> i == <span
style='color:blue'>nil</span> <span style='color:blue'>then</span> <span
style='color:blue'>break</span> <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,239,246)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; table.insert(t, i)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>后面我们还会看到可以使用</span><span
lang=EN-US>string.gfind</span><span style='font-family:宋体'>迭代子来简化上面这个循环。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>string.gsub</span><span
style='font-family:宋体'>函数有三个参数：目标串，模式串，替换串。他基本作用是用来查找匹配模式的串，并将使用替换串其替换掉：</span></p>

<div style='border:RGB(216,100,253) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(233,236,250);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>s = string.gsub(<span style='color:red'>&quot;Lua is cute&quot;</span>,
<span style='color:red'>&quot;cute&quot;</span>, <span style='color:red'>&quot;great&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,253,239)'><span
lang=EN-US>print(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
Lua is great</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>s = string.gsub(<span style='color:red'>&quot;all lii&quot;</span>, <span
style='color:red'>&quot;l&quot;</span>, <span style='color:red'>&quot;x&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,225,222)'><span
lang=EN-US>print(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
axx xii</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>s = string.gsub(<span style='color:red'>&quot;Lua is great&quot;</span>,
<span style='color:red'>&quot;perl&quot;</span>, <span style='color:red'>&quot;tcl&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,241,252)'><span
lang=EN-US>print(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
Lua is great</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>第四个参数是可选的，用来限制替换的范围：</span></p>

<div style='border:RGB(216,100,253) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,222,254)'><span
lang=EN-US>s = string.gsub(<span style='color:red'>&quot;all lii&quot;</span>, <span
style='color:red'>&quot;l&quot;</span>, <span style='color:red'>&quot;x&quot;</span>,
1)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; axl lii</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,233,228)'><span
lang=EN-US>s = string.gsub(<span style='color:red'>&quot;all lii&quot;</span>, <span
style='color:red'>&quot;l&quot;</span>, <span style='color:red'>&quot;x&quot;</span>,
2)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; axx lii</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>string.gsub</span><span
style='font-family:宋体'>的第二个返回值表示他进行替换操作的次数。例如，下面代码涌来计算一个字符串中空格出现的次数：</span></p>

<div style='border:RGB(216,100,253) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(225,241,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>_, count = string.gsub(str, <span style='color:red'>&quot; &quot;</span>,
<span style='color:red'>&quot; &quot;</span>)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（注意，</span><span
lang=EN-US>_ </span><span style='font-family:宋体'>只是一个哑元变量）</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

