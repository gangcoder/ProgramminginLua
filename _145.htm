<html>

<head>
  <title>25.3 通用的函数调用 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;25.3 通用的函数调用</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>看一个稍微高级的例子，我们使用</span><span
lang=EN-US>C</span><span style='font-family:宋体'>的</span><span lang=EN-US>vararg</span><span
style='font-family:宋体'>来封装对</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>函数的调用。我们的封装后的函数（</span><span lang=EN-US>call_va</span><span
style='font-family:宋体'>）接受被调用的函数明作为第一个参数，第二参数是一个描述参数和结果类型的字符串，最后是一个保存返回结果的变量指针的列表。使用这个函数，我们可以将前面的例子改写为：</span></p>

<div style='border:RGB(78,116,128) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,228,242)'><span
lang=EN-US>call_va(<span style='color:red'>&quot;f&quot;</span>, <span
style='color:red'>&quot;dd&gt;d&quot;</span>, x, y, &amp;z);</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>字符串</span><span
lang=EN-US> &quot;dd&gt;d&quot; </span><span style='font-family:宋体'>表示函数有两个</span><span
lang=EN-US>double</span><span style='font-family:宋体'>类型的参数，一个</span><span
lang=EN-US>double</span><span style='font-family:宋体'>类型的返回结果。我们使用字母</span><span
lang=EN-US> 'd' </span><span style='font-family:宋体'>表示</span><span lang=EN-US>double</span><span
style='font-family:宋体'>；</span><span lang=EN-US>'i' </span><span
style='font-family:宋体'>表示</span><span lang=EN-US>integer</span><span
style='font-family:宋体'>，</span><span lang=EN-US>'s' </span><span
style='font-family:宋体'>表示</span><span lang=EN-US>strings</span><span
style='font-family:宋体'>；</span><span lang=EN-US>'&gt;' </span><span
style='font-family:宋体'>作为参数和结果的分隔符。如果函数没有返回结果，</span><span lang=EN-US>'&gt;' </span><span
style='font-family:宋体'>是可选的。</span></p>

<div style='border:RGB(78,116,128) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,253,230)'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;stdarg.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,226,221)'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> call_va (<span
style='color:blue'>const</span> <span style='color:blue'>char</span> *func, <span
style='color:blue'>const</span> <span style='color:blue'>char</span> *sig, ...)
{</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_list vl;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,239,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>int</span> narg, nres;&nbsp;&nbsp; <span
style='color:green'>/* number of arguments and results */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,255,220)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_start(vl, sig);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_getglobal(L, func);&nbsp; <span
style='color:green'>/* get function */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,255,224)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* push arguments */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,244,255)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; narg = 0;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span> (*sig) {&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* push arguments */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,252,223)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>switch</span>
(*sig++) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,228,255)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
'd':&nbsp; <span style='color:green'>/* double argument */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_pushnumber(L,
va_arg(vl, <span style='color:blue'>double</span>));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,232,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,249,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
'i':&nbsp; <span style='color:green'>/* int argument */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_pushnumber(L,
va_arg(vl, <span style='color:blue'>int</span>));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(236,220,222)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,223,241)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
's':&nbsp; <span style='color:green'>/* string argument */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_pushstring(L,
va_arg(vl, <span style='color:blue'>char</span> *));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,231,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,236,236)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
'&gt;':</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>goto</span> endwhile;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,252,239)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>default</span>:</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,229,232)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L,
<span style='color:red'>&quot;invalid option (%c)&quot;</span>, *(sig - 1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,244,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; narg++;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; luaL_checkstack(L, 1, <span
style='color:red'>&quot;too many arguments&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,222,255)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; } endwhile:</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,225,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* do the call */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; nres = strlen(sig);&nbsp; <span style='color:
green'>/* number of expected results */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,251,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> (lua_pcall(L,
narg, nres, 0) != 0)&nbsp; <span style='color:green'>/* do the call */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;error running function `%s': %s&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,245,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; func,
lua_tostring(L, -1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,237,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* retrieve results */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; nres = -nres;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* stack index of first result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,247,224)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span> (*sig) {&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* get results */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>switch</span>
(*sig++) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,241,251)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
'd':&nbsp; <span style='color:green'>/* double result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,226,236)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>if</span> (!lua_isnumber(L, nres))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L,
<span style='color:red'>&quot;wrong result type&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,226,242)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *va_arg(vl,
<span style='color:blue'>double</span> *) = lua_tonumber(L, nres);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,230,239)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
'i':&nbsp; <span style='color:green'>/* int result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,241,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>if</span> (!lua_isnumber(L, nres))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L,
<span style='color:red'>&quot;wrong result type&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,232,232)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *va_arg(vl,
<span style='color:blue'>int</span> *) = (<span style='color:blue'>int</span>)lua_tonumber(L,
nres);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,220,248)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>case</span>
's':&nbsp; <span style='color:green'>/* string result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,245,222)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>if</span> (!lua_isstring(L, nres))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L,
<span style='color:red'>&quot;wrong result type&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,238,252)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *va_arg(vl,
<span style='color:blue'>const</span> <span style='color:blue'>char</span> **)
= lua_tostring(L, nres);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span>;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,221,233)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>default</span>:</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,234,221)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L,
<span style='color:red'>&quot;invalid option (%c)&quot;</span>, *(sig - 1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,242,242)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nres++;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,237,250)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_end(vl);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>尽管这段代码具有一般性，这个函数和前面我们的例子有相同的步骤：将函数入栈，参数入栈，调用函数，获取返回结果。大部分代码都很直观，但也有一点技巧。首先，不需要检查</span><span
lang=EN-US>func</span><span style='font-family:宋体'>是否是一个函数，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>可以捕捉这个错误。第二，可以接受任意多个参数，所以必须检查栈的空间。第三，因为函数可能返回字符串，</span><span
lang=EN-US>call_va</span><span style='font-family:宋体'>不能从栈中弹出结果，在调用者获取临时字符串的结果之后（拷贝到其他的变量中），由调用者负责弹出结果。</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section36 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

