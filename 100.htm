<html>

<head>
  <title>16.4 私有性（privacy） - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;16.4 私有性（privacy）</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>很多人认为私有性是面向对象语言的应有的一部分。每个对象的状态应该是这个对象自己的事情。在一些面向对象的语言中，比如</span><span
lang=EN-US>C++</span><span style='font-family:宋体'>和</span><span lang=EN-US>Java</span><span
style='font-family:宋体'>你可以控制对象成员变量或者成员方法是否私有。其他一些语言比如</span><span lang=EN-US>Smalltalk</span><span
style='font-family:宋体'>中，所有的成员变量都是私有，所有的成员方法都是公有的。第一个面向对象语言</span><span
lang=EN-US>Simula</span><span style='font-family:宋体'>不提供任何保护成员机制。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>如前面我们所看到的</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中的主要对象设计不提供私有性访问机制。部分原因因为这是我们使用通用数据结构</span><span
lang=EN-US>tables</span><span style='font-family:宋体'>来表示对象的结果。但是这也反映了后来的</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的设计思想。</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>没有打算被用来进行大型的程序设计，相反，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>目标定于小型到中型的程序设计，通常是作为大型系统的一部分。典型的，被一个或者很少几个程序员开发，甚至被非程序员使用。所以，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>避免太冗余和太多的人为限制。如果你不想访问一个对象内的一些东西就不要访问（</span><span
lang=EN-US>If you do not want to access something inside an object, just do not
do it.</span><span style='font-family:宋体'>）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>然而，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的另一个目标是灵活性，提供程序员元机制（</span><span
lang=EN-US>meta-mechanisms</span><span style='font-family:宋体'>），通过他你可以实现很多不同的机制。虽然</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中基本的面向对象设计并不提供私有性访问的机制，我们可以用不同的方式来实现他。虽然这种实现并不常用，但知道他也是有益的，不仅因为它展示了</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的一些有趣的角落，也因为它可能是某些问题的很好地解决方案。设计的基本思想是，每个对象用两个表来表示：一个描述状态；另一个描述操作（或者叫接口）。对象本身通过第二个表来访问，也就是说，通过接口来访问对象。为了避免未授权的访问，表示状态的表中不涉及到操作；表示操作的表也不涉及到状态，取而代之的是，状态被保存在方法的闭包内。例如，用这种设计表述我们的银行账号，我们使用下面的函数工厂创建新的对象：</span></p>

<div style='border:RGB(67,216,59) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,253,249)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> newAccount
(initialBalance)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> self =
{balance = initialBalance}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,246,237)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> withdraw = <span
style='color:blue'>function</span> (v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balance = self.balance - v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,227,224)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,252,237)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> deposit = <span
style='color:blue'>function</span> (v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balance = self.balance + v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,227,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,222,238)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> getBalance
= <span style='color:blue'>function</span> () <span style='color:blue'>return</span>
self.balance <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,222,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; withdraw = withdraw,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,232,223)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deposit = deposit,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBalance = getBalance</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,249,226)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>首先，函数创建一个表用来描述对象的内部状态，并保存在局部变量</span><span
lang=EN-US>self</span><span style='font-family:宋体'>内。然后，函数为对象的每一个方法创建闭包（也就是说，嵌套的函数实例）。最后，函数创建并返回外部对象，外部对象中将局部方法名指向最终要实现的方法。这儿的关键点在于：这些方法没有使用额外的参数</span><span
lang=EN-US>self</span><span style='font-family:宋体'>，代替的是直接访问</span><span
lang=EN-US>self</span><span style='font-family:宋体'>。因为没有这个额外的参数，我们不能使用冒号语法来访问这些对象。函数只能像其他函数一样调用：</span></p>

<div style='border:RGB(67,216,59) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(227,244,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>acc1 = newAccount(100.00)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,238,228)'><span
lang=EN-US>acc1.withdraw(40.00)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(acc1.getBalance())&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
60</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这种设计实现了任何存储在</span><span
lang=EN-US>self</span><span style='font-family:宋体'>表中的部分都是私有的，</span><span
lang=EN-US>newAccount</span><span style='font-family:宋体'>返回之后，没有什么方法可以直接访问对象，我们只能通过</span><span
lang=EN-US>newAccount</span><span style='font-family:宋体'>中定义的函数来访问他。虽然我们的例子中仅仅将一个变量放到私有表中，但是我们可以将对象的任何的部分放到私有表中。我们也可以定义私有方法，他们看起来象公有的，但我们并不将其放到接口中。例如，我们的账号可以给某些用户取款享有额外的</span><span
lang=EN-US>10%</span><span style='font-family:宋体'>的存款上限，但是我们不想用户直接访问这种计算的详细信息，我们实现如下：</span></p>

<div style='border:RGB(67,216,59) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(236,250,241);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> newAccount
(initialBalance)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,240,225)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> self = {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balance = initialBalance,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,254,226)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LIM = 10000.00,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,220,222)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> extra = <span
style='color:blue'>function</span> ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,239,221)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
self.balance &gt; self.LIM <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> self.balance*0.10</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,246,222)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> 0</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,250,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,243,236)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> getBalance
= <span style='color:blue'>function</span> ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,223,253)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
self.balance + self.extra()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,222,221)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; ...</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这样，对于用户而言就没有办法直接访问</span><span
lang=EN-US>extra</span><span style='font-family:宋体'>函数了。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

