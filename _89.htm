<html>

<head>
  <title>14.3 非全局的环境 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;14.3 非全局的环境</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>全局环境的一个问题是，任何修改都会影响你的程序的所有部分。例如，当你安装一个</span><span
lang=EN-US>metatable</span><span style='font-family:宋体'>去控制全局访问时，你的整个程序都必须遵循同一个指导方针。如果你想使用标准库，标准库中可能使用到没有声明的全局变量，你将碰到坏运。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua 5.0</span><span
style='font-family:宋体'>允许每个函数可以有自己的环境来改善这个问题，听起来这很奇怪；毕竟，全局变量表的目的就是为了全局性使用。然而在</span><span
lang=EN-US>Section 15.4</span><span style='font-family:宋体'>我们将看到这个机制带来很多有趣的结构，全局的值依然是随处可以获取的。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>可以使用</span><span
lang=EN-US>setfenv</span><span style='font-family:宋体'>函数来改变一个函数的环境。</span><span
lang=EN-US>Setfenv</span><span style='font-family:宋体'>接受函数和新的环境作为参数。除了使用函数本身，还可以指定一个数字表示栈顶的活动函数。数字</span><span
lang=EN-US>1</span><span style='font-family:宋体'>代表当前函数，数字</span><span
lang=EN-US>2</span><span style='font-family:宋体'>代表调用当前函数的函数（这对写一个辅助函数来改变他们调用者的环境是很方便的）依此类推。下面这段代码是企图应用</span><span
lang=EN-US>setfenv</span><span style='font-family:宋体'>失败的例子：</span></p>

<div style='border:RGB(186,201,171) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,223,242)'><span
lang=EN-US>a = 1&nbsp; &nbsp;&nbsp;&nbsp; <span style='color:green'>-- create a
global variable</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- change current environment to a new empty
table</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,252,225)'><span
lang=EN-US>setfenv(1, {})</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(a)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>导致：</span></p>

<div style='border:RGB(186,201,171) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(231,246,231);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>stdin:5: attempt to call global `print' (a nil value)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（你必须在单独的</span><span
lang=EN-US>chunk</span><span style='font-family:宋体'>内运行这段代码，如果你在交互模式逐行运行他，每一行都是一个不同的函数，调用</span><span
lang=EN-US>setfenv</span><span style='font-family:宋体'>只会影响他自己的那一行。）一旦你改变了你的环境，所有全局访问都使用这个新的表，如果她为空，你就丢失所有你的全局变量，甚至</span><span
lang=EN-US>_G</span><span style='font-family:宋体'>，所以，你应该首先使用一些有用的值封装（</span><span
lang=EN-US>populate</span><span style='font-family:宋体'>）她，比如老的环境：</span></p>

<div style='border:RGB(186,201,171) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(228,233,241);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>a = 1&nbsp; <span style='color:green'>-- create a global variable</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,226,246)'><span
lang=EN-US style='color:green'>-- change current environment</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setfenv(1, {_G = _G})</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,239,231)'><span
lang=EN-US>_G.print(a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; nil</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>_G.print(_G.a)&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt; 1</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在，当你访问</span><span
lang=EN-US>&quot;global&quot; _G</span><span style='font-family:宋体'>，他的值为旧的环境，其中你可以使用</span><span
lang=EN-US>print</span><span style='font-family:宋体'>函数。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>你也可以使用继承封装</span><span
lang=EN-US>(populate)</span><span style='font-family:宋体'>你的新的环境：</span></p>

<div style='border:RGB(186,201,171) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(251,255,229);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>a = 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,247,227)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> newgt = {}&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- create new environment</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setmetatable(newgt, {__index = _G})</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,224,251)'><span
lang=EN-US>setfenv(1, newgt)&nbsp;&nbsp;&nbsp; <span style='color:green'>-- set
it</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 1</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在这段代码新的环境从旧的环境中继承了</span><span
lang=EN-US>print</span><span style='font-family:宋体'>和</span><span lang=EN-US>a</span><span
style='font-family:宋体'>；然而，任何赋值操作都对新表进行，不用担心误操作修改了全局变量表。另外，你仍然可以通过</span><span
lang=EN-US>_G</span><span style='font-family:宋体'>修改全局变量：</span></p>

<div style='border:RGB(186,201,171) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(221,241,254);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- continuing previous code</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(225,223,224)'><span
lang=EN-US>a = 10</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
10</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(234,223,236)'><span
lang=EN-US>print(_G.a)&nbsp;&nbsp; <span style='color:green'>--&gt; 1</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>_G.a = 20</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,228,243)'><span
lang=EN-US>print(_G.a)&nbsp;&nbsp; <span style='color:green'>--&gt; 20</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当你创建一个新的函数时，他从创建他的函数继承了环境变量。所以，如果一个</span><span
lang=EN-US>chunk</span><span style='font-family:宋体'>改变了他自己的环境，这个</span><span
lang=EN-US>chunk</span><span style='font-family:宋体'>所有在改变之后定义的函数都共享相同的环境，都会受到影响。这对创建命名空间是非常有用的机制，我们下一章将会看到。</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section23 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

