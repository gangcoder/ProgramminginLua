<html>

<head>
  <title>23.3 Profiles - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;23.3 Profiles</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>尽管</span><span
lang=EN-US>debug</span><span style='font-family:宋体'>库名字上看来是一个调式库，除了用于调式以外，还可以用于完成其他任务。这种常见的任务就是</span><span
lang=EN-US>profiling</span><span style='font-family:宋体'>。对于一个实时的</span><span
lang=EN-US>profile</span><span style='font-family:宋体'>来说（</span><span
lang=EN-US>For a profile with timing</span><span style='font-family:宋体'>），最好使用</span><span
lang=EN-US>C</span><span style='font-family:宋体'>接口来完成：对于每一个</span><span
lang=EN-US>hook</span><span style='font-family:宋体'>过多的</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>调用代价太大并且通常会导致测量的结果不准确。然而，对于计数的</span><span lang=EN-US>profiles</span><span
style='font-family:宋体'>而言，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>代码可以很好的胜任。下面这部分我们将实现一个简单的</span><span lang=EN-US>profiler</span><span
style='font-family:宋体'>：列出在程序运行过程中，每一个函数被调用的次数。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>我们程序的主要数据结构是两张表，一张关联函数和他们调用次数的表，一张关联函数和函数名的表。这两个表的索引下标是函数本身。</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,247,247)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> Counters = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> Names = {}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在</span><span
lang=EN-US>profiling</span><span style='font-family:宋体'>之后，我们可以访问函数名数据，但是记住：在函数在活动状态的情况下，可以得到比较好的结果，因为那时候</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>会察看正在运行的函数的代码来查找指定的函数名。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在我们定义</span><span
lang=EN-US>hook</span><span style='font-family:宋体'>函数，他的任务就是获取正在执行的函数并将对应的计数器加</span><span
lang=EN-US>1</span><span style='font-family:宋体'>；同时这个</span><span lang=EN-US>hook</span><span
style='font-family:宋体'>函数也收集函数名信息：</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(224,249,237);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> <span
style='color:blue'>function</span> hook ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,224,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> f =
debug.getinfo(2, <span style='color:red'>&quot;f&quot;</span>).func</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> Counters[f] ==
<span style='color:blue'>nil</span> <span style='color:blue'>then</span>&nbsp; <span
style='color:green'>-- first time `f' is called?</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,222,228)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Counters[f] = 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Names[f] = debug.getinfo(2, <span
style='color:red'>&quot;Sn&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,237,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span>&nbsp;&nbsp; <span
style='color:green'>-- only increment the counter</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Counters[f] = Counters[f] + 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(222,242,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下一步就是使用这个</span><span
lang=EN-US>hook</span><span style='font-family:宋体'>运行程序，我们假设程序的主</span><span
lang=EN-US>chunk</span><span style='font-family:宋体'>在一个文件内，并且用户将这个文件名作为</span><span
lang=EN-US>profiler</span><span style='font-family:宋体'>的参数：</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(242,246,238);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>prompt&gt; lua profiler main-prog</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这种情况下，我们的文件名保存在</span><span
lang=EN-US>arg[1]</span><span style='font-family:宋体'>，打开</span><span
lang=EN-US>hook</span><span style='font-family:宋体'>并运行文件：</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(232,223,248);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> f =
assert(loadfile(arg[1]))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,255,225)'><span
lang=EN-US>debug.sethook(hook, <span style='color:red'>&quot;c&quot;</span>)&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- turn on the hook</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>f()&nbsp;&nbsp;&nbsp; <span style='color:green'>-- run the main
program</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,229,247)'><span
lang=EN-US>debug.sethook()&nbsp;&nbsp; <span style='color:green'>-- turn off
the hook</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最后一步是显示结果，下一个函数为一个函数产生名称，因为在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中的函数名不确定，所以我们对每一个函数加上他的位置信息，型如</span><span
lang=EN-US>file:line </span><span style='font-family:宋体'>。如果一个函数没有名字，那么我们只用它的位置表示。如果一个函数是</span><span
lang=EN-US>C</span><span style='font-family:宋体'>函数，我们只是用它的名字表示（他没有位置信息）。</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,221,222)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> getname (func)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> n =
Names[func]</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,235,252)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> n.what == <span
style='color:red'>&quot;C&quot;</span> <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
n.name</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,238,223)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> loc =
string.format(<span style='color:red'>&quot;[%s]:%s&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,241,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.short_src,
n.linedefined)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> n.namewhat ~= <span
style='color:red'>&quot;&quot;</span> <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,223,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
string.format(<span style='color:red'>&quot;%s (%s)&quot;</span>, loc, n.name)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,247,224)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
string.format(<span style='color:red'>&quot;%s&quot;</span>, loc)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,251,227)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最后，我们打印每一个函数和他的计数器：</span></p>

<div style='border:RGB(149,59,50) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,222,221)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> func, count <span
style='color:blue'>in</span> pairs(Counters) <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(getname(func), count)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,235,224)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>如果我们将我们的</span><span
lang=EN-US>profiler</span><span style='font-family:宋体'>应用到</span><span
lang=EN-US>Section 10.2</span><span style='font-family:宋体'>的马尔科夫链的例子上，我们得到如下结果：</span></p>

<div style='border:dashed windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,228,235)'><span
lang=EN-US>[markov.lua]:4 884723</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>write&nbsp; 10000</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,231,227)'><span
lang=EN-US>[markov.lua]:0 (f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>read&nbsp;&nbsp; 31103</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,240,240)'><span
lang=EN-US>sub&nbsp;&nbsp;&nbsp; 884722</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>[markov.lua]:1 (allwords)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,222,253)'><span
lang=EN-US>[markov.lua]:20 (prefix)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 894723</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>find&nbsp;&nbsp; 915824</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,237,234)'><span
lang=EN-US>[markov.lua]:26 (insert)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 884723</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>random&nbsp; 10000</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,242,227)'><span
lang=EN-US>sethook 1</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>insert&nbsp; 884723</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>那意味着第四行的匿名函数（在</span><span
lang=EN-US>allwords</span><span style='font-family:宋体'>内定义的迭代函数）被调用</span><span
lang=EN-US>884,723</span><span style='font-family:宋体'>次，</span><span
lang=EN-US>write(io.write)</span><span style='font-family:宋体'>被调用</span><span
lang=EN-US>10,000</span><span style='font-family:宋体'>次。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>你可以对这个</span><span
lang=EN-US>profiler</span><span style='font-family:宋体'>进行一些改进，比如对输出排序、打印出比较好的函数名、改善输出格式。不过，这个基本的</span><span
lang=EN-US>profiler</span><span style='font-family:宋体'>已经很有用，并且可以作为很多高级工具的基础。</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section33 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

