<html>

<head>
  <title>24.1 第一个示例程序 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;24.1 第一个示例程序</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>通过一个简单的应用程序让我们开始这个预览：一个独立的</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>解释器的实现。我们写一个简单的解释器，代码如下：</span></p>

<div style='border:RGB(38,178,9) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,224,251)'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;stdio.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;lua.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(236,248,251)'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US>
&lt;lauxlib.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;lualib.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,251,245)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> main (<span
style='color:blue'>void</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,238,251)'><span
lang=EN-US>{</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>char</span> buff[256];</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,239,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>int</span> error;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_State *L = lua_open();&nbsp; <span
style='color:green'>/* opens Lua */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,249,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_base(L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* opens the basic library */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_table(L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* opens the table library */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,241,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_io(L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* opens the I/O library */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_string(L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* opens the string lib. */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,223,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_math(L);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* opens the math lib. */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,227,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span>
(fgets(buff, <span style='color:blue'>sizeof</span>(buff), stdin) != NULL) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = luaL_loadbuffer(L,
buff, strlen(buff),</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,237,249)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:red'>&quot;line&quot;</span>) || lua_pcall(L, 0, 0, 0);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
(error) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,246,249)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf(stderr,
<span style='color:red'>&quot;%s&quot;</span>, lua_tostring(L, -1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_pop(L,
1);<span style='color:green'>/* pop error message from the stack */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,223,249)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,251,255)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_close(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,228,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> 0;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>头文件</span><span
lang=EN-US>lua.h</span><span style='font-family:宋体'>定义了</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>提供的基础函数。其中包括创建一个新的</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>环境的函数（如</span><span lang=EN-US>lua_open</span><span
style='font-family:宋体'>），调用</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>函数（如</span><span lang=EN-US>lua_pcall</span><span
style='font-family:宋体'>）的函数，读取</span><span lang=EN-US>/</span><span
style='font-family:宋体'>写入</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>环境的全局变量的函数，注册可以被</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>代码调用的新函数的函数，等等。所有在</span><span lang=EN-US>lua.h</span><span
style='font-family:宋体'>中被定义的都有一个</span><span lang=EN-US>lua_</span><span
style='font-family:宋体'>前缀。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>头文件</span><span
lang=EN-US>lauxlib.h</span><span style='font-family:宋体'>定义了辅助库（</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>）提供的函数。同样，所有在其中定义的函数等都以</span><span
lang=EN-US>luaL_</span><span style='font-family:宋体'>打头（例如，</span><span
lang=EN-US>luaL_loadbuffer</span><span style='font-family:宋体'>）。辅助库利用</span><span
lang=EN-US>lua.h</span><span style='font-family:宋体'>中提供的基础函数提供了更高层次上的抽象；所有</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>标准库都使用了</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>。基础</span><span
lang=EN-US>API</span><span style='font-family:宋体'>致力于</span><span lang=EN-US>economy
and orthogonality</span><span style='font-family:宋体'>，相反</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>致力于实现一般任务的实用性。当然，基于你的程序的需要而创建其它的抽象也是非常容易的。需要铭记在心的是，</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>没有存取</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>内部的权限。它完成它所有的工作都是通过正式的基本</span><span
lang=EN-US>API</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>库没有定义任何全局变量。它所有的状态保存在动态结构</span><span lang=EN-US>lua_State</span><span
style='font-family:宋体'>中，而且指向这个结构的指针作为所有</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>函数的一个参数。这样的实现方式使得</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>能够重入（</span><span lang=EN-US>reentrant</span><span
style='font-family:宋体'>）且为在多线程中的使用作好准备。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>函数</span><span
lang=EN-US>lua_open</span><span style='font-family:宋体'>创建一个新环境（或</span><span
lang=EN-US>state</span><span style='font-family:宋体'>）。</span><span lang=EN-US>lua_open</span><span
style='font-family:宋体'>创建一个新的环境时，这个环境并不包括预定义的函数，甚至是</span><span lang=EN-US>print</span><span
style='font-family:宋体'>。为了保持</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>的苗条，所有的标准库以单独的包提供，所以如果你不需要就不会强求你使用它们。头文件</span><span
lang=EN-US>lualib.h</span><span style='font-family:宋体'>定义了打开这些库的函数。例如，调用</span><span
lang=EN-US>luaopen_io</span><span style='font-family:宋体'>，以创建</span><span
lang=EN-US>io table</span><span style='font-family:宋体'>并注册</span><span
lang=EN-US>I/O</span><span style='font-family:宋体'>函数（</span><span lang=EN-US>io.read,io.write</span><span
style='font-family:宋体'>等等）到</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>环境中。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>创建一个</span><span
lang=EN-US>state</span><span style='font-family:宋体'>并将标准库载入之后，就可以着手解释用户的输入了。对于用户输入的每一行，</span><span
lang=EN-US>C</span><span style='font-family:宋体'>程序首先调用</span><span lang=EN-US>luaL_loadbuffer</span><span
style='font-family:宋体'>编译这些</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>代码。如果没有错误，这个调用返回零并把编译之后的</span><span lang=EN-US>chunk</span><span
style='font-family:宋体'>压入栈。（记住，我们将在下一节中讨论魔法般的栈）之后，</span><span lang=EN-US>C</span><span
style='font-family:宋体'>程序调用</span><span lang=EN-US>lua_pcall</span><span
style='font-family:宋体'>，它将会把</span><span lang=EN-US>chunk</span><span
style='font-family:宋体'>从栈中弹出并在保护模式下运行它。和</span><span lang=EN-US>luaL_laodbuffer</span><span
style='font-family:宋体'>一样，</span><span lang=EN-US>lua_pcall</span><span
style='font-family:宋体'>在没有错误的情况下返回零。在有错误的情况下，这两个函数都将一条错误消息压入栈；我们可以用</span><span
lang=EN-US>lua_tostring</span><span style='font-family:宋体'>来得到这条信息、输出它，用</span><span
lang=EN-US>lua_pop</span><span style='font-family:宋体'>将它从栈中删除。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>注意，在有错误发生的情况下，这个程序简单的输出错误信息到标准错误流。在</span><span
lang=EN-US>C</span><span style='font-family:宋体'>中，实际的错误处理可能是非常复杂的而且如何处理依赖于应用程序本身。</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>核心决不会直接输出任何东西到任务输出流上；它通过返回错误代码和错误信息来发出错误信号。每一个应用程序都可以用最适合它们自己的方式来处理这些错误。为了讨论的简单，现在我们假想一个简单的错误处理方式，就象下面代码一样，它只是输出一条错误信息、关闭</span><span
lang=EN-US>Lua state</span><span style='font-family:宋体'>、退出整个应用程序。</span></p>

<div style='border:RGB(38,178,9) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(244,250,228);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;stdarg.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,244,237)'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;stdio.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;stdlib.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,249,252)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> error (lua_State *L,
<span style='color:blue'>const</span> <span style='color:blue'>char</span>
*fmt, ...) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(225,253,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_list argp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_start(argp, fmt);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,254,240)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; vfprintf(stderr, argp);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; va_end(argp);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,237,237)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_close(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; exit(EXIT_FAILURE);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,250,229)'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>稍候我们再详细的讨论关于在应用代码中如何处理错误</span><span
lang=EN-US>.</span><span style='font-family:宋体'>因为你可以将</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>和</span><span lang=EN-US>C/C++</span><span
style='font-family:宋体'>代码一起编译，</span><span lang=EN-US>lua.h</span><span
style='font-family:宋体'>并不包含这些典型的在其他</span><span lang=EN-US>C</span><span
style='font-family:宋体'>库中出现的整合代码：</span></p>

<div style='border:RGB(38,178,9) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,220,234)'><span
lang=EN-US style='color:blue'>#ifdef</span><span lang=EN-US> __cplusplus</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>extern</span><span lang=EN-US> <span
style='color:red'>&quot;C&quot;</span> {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,241,247)'><span
lang=EN-US style='color:blue'>#endif</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; ...</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,244,250)'><span
lang=EN-US style='color:blue'>#ifdef</span><span lang=EN-US> __cplusplus</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,227,246)'><span
lang=EN-US style='color:blue'>#endif</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>因此，如果你用</span><span
lang=EN-US>C</span><span style='font-family:宋体'>方式来编译它，但用在</span><span
lang=EN-US>C++</span><span style='font-family:宋体'>中，那么你需要象下面这样来包含</span><span
lang=EN-US>lua.h</span><span style='font-family:宋体'>头文件。</span></p>

<div style='border:RGB(38,178,9) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,233,242)'><span
lang=EN-US style='color:blue'>extern</span><span lang=EN-US> <span
style='color:red'>&quot;C&quot;</span> {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;lua.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,247,226)'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一个常用的技巧是建立一个包含上面代码的</span><span
lang=EN-US>lua.hpp</span><span style='font-family:宋体'>头文件，并将这个新的头文件包含进你的</span><span
lang=EN-US>C++</span><span style='font-family:宋体'>程序。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

