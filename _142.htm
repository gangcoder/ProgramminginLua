<html>

<head>
  <title> 第25章 扩展你的程序 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;第25章 扩展你的程序</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>作为配置语言是</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>的一个重要应用。在这个章节里</span><span
lang=EN-US>,</span><span style='font-family:宋体'>我们举例说明如何用</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>设置一个程序。让我们用一个简单的例子开始然后展开到更复杂的应用中。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>首先，让我们想象一下一个简单的配置情节：你的</span><span
lang=EN-US>C</span><span style='font-family:宋体'>程序（程序名为</span><span lang=EN-US>PP</span><span
style='font-family:宋体'>）有一个窗口界面并且可以让用户指定窗口的初始大小。显然，类似这样简单的应用，有多种解决方法比使用</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>更简单，比如环境变量或者存有变量值的文件。但，即使是用一个简单的文本文件，你也不知道如何去解析。所以，最后决定采用一个</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>配置文件（这就是</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>程序中的纯文本文件）。在这种简单的文本形式中通常包含类似如下的信息行：</span></p>

<div style='border:RGB(113,34,114) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,241,249)'><span
lang=EN-US style='color:green'>-- configuration file for program `pp'</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- define window size</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,230,230)'><span
lang=EN-US>width = 200</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>height = 300</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在，你得调用</span><span
lang=EN-US>LUA API</span><span style='font-family:宋体'>函数去解析这个文件，取得</span><span
lang=EN-US>width</span><span style='font-family:宋体'>和</span><span lang=EN-US>height</span><span
style='font-family:宋体'>这两个全局变量的值。下面这个取值函数就起这样的作用：</span></p>

<div style='border:RGB(113,34,114) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(231,235,244);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;lua.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,255,243)'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US>
&lt;lauxlib.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>#include</span><span lang=EN-US> &lt;lualib.h&gt;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,250,241)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> load (<span
style='color:blue'>char</span> *filename, <span style='color:blue'>int</span>
*width, <span style='color:blue'>int</span> *height) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,225,241)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_State *L = lua_open();</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_base(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,232,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_io(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_string(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,246,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaopen_math(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,227,234)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
(luaL_loadfile(L, filename) || lua_pcall(L, 0, 0, 0))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;cannot run configuration file: %s&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,242,255)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_tostring(L,
-1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,242,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_getglobal(L, <span style='color:red'>&quot;width&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_getglobal(L, <span style='color:red'>&quot;height&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,226,237)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
(!lua_isnumber(L, -2))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;`width' should be a number\n&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,221,236)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
(!lua_isnumber(L, -1))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;`height' should be a number\n&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,229,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; *width = (<span style='color:blue'>int</span>)lua_tonumber(L,
-2);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; *height = (<span style='color:blue'>int</span>)lua_tonumber(L,
-1);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,234,235)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_close(L);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,241,252)'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>首先，程序打开</span><span
lang=EN-US>LUA</span><span style='font-family:宋体'>包并加载了标准函数库（虽然这是可选的，但通常包含这些库是比较好的编程思想）。然后程序使用</span><span
lang=EN-US>luaL_loadfile</span><span style='font-family:宋体'>方法根据参数</span><span
lang=EN-US>filename</span><span style='font-family:宋体'>加载此文件中的信息块并调用</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>函数运行，这些函数运行时若发生错误（例如配置文件中有语法错误），将返回非零的错误代码并将此错误信息压入栈中。通常，我们用带参数</span><span
lang=EN-US>index</span><span style='font-family:宋体'>值为</span><span lang=EN-US>-1</span><span
style='font-family:宋体'>的</span><span lang=EN-US>lua_tostring</span><span
style='font-family:宋体'>函数取得栈顶元素（</span><span lang=EN-US>error</span><span
style='font-family:宋体'>函数我们已经在</span><span lang=EN-US>24.1</span><span
style='font-family:宋体'>章节中定义）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>解析完取得的信息块后，程序会取得全局变量值。为此，程序调用了两次</span><span
lang=EN-US>lua_getglobal</span><span style='font-family:宋体'>函数，其中一参数为变量名称。每调用一次就把相应的变量值压入栈顶，所以变量</span><span
lang=EN-US>width</span><span style='font-family:宋体'>的</span><span lang=EN-US>index</span><span
style='font-family:宋体'>值是</span><span lang=EN-US>-2</span><span
style='font-family:宋体'>而变量</span><span lang=EN-US>height</span><span
style='font-family:宋体'>的</span><span lang=EN-US>index</span><span
style='font-family:宋体'>值是</span><span lang=EN-US>-1</span><span
style='font-family:宋体'>（在栈顶）。（因为先前的栈是空的，需要从栈底重新索引，</span><span lang=EN-US>1</span><span
style='font-family:宋体'>表示第一个元素</span><span lang=EN-US>2</span><span
style='font-family:宋体'>表示第二个元素。由于从栈顶索引，不管栈是否为空，你的代码也能运行）。接着，程序用</span><span
lang=EN-US>lua_isnumber</span><span style='font-family:宋体'>函数判断每个值是否为数字。</span><span
lang=EN-US>lua_tonumber</span><span style='font-family:宋体'>函数将得到的数值转换成</span><span
lang=EN-US>double</span><span style='font-family:宋体'>类型并用</span><span
lang=EN-US>(int)</span><span style='font-family:宋体'>强制转换成整型。最后，关闭数据流并返回值。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>是否值得一用</span><span lang=EN-US>?</span><span
style='font-family:宋体'>正如我前面提到的，在这个简单的例子中，相比较于</span><span lang=EN-US>lua</span><span
style='font-family:宋体'>用一个只包含有两个数字的文件会更简单。即使如此，使用</span><span lang=EN-US>lua</span><span
style='font-family:宋体'>也带来了一些优势。首先，它为你处理所有的语法细节（包括错误）；你的配置文件甚至可以包含注释！其次，用可以用</span><span
lang=EN-US>lua</span><span style='font-family:宋体'>做更多复杂的配置。例如，脚本可以向用户提示相关信息，或者也可以查询环境变量以选择合适的大小：</span></p>

<div style='border:RGB(113,34,114) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,231,242)'><span
lang=EN-US style='color:green'>-- configuration file for program 'pp'</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> getenv(<span
style='color:red'>&quot;DISPLAY&quot;</span>) == <span style='color:red'>&quot;:0.0&quot;</span>
<span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,221,220)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; width = 300; height = 300</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>else</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,233,226)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; width = 200; height = 200</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在这样简单的配置情节中，很难预料用户想要什么；不过只要脚本定义了这两个变量，你的</span><span
lang=EN-US>C</span><span style='font-family:宋体'>程序无需改变就可运行。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最后一个使用</span><span
lang=EN-US>lua</span><span style='font-family:宋体'>的理由：在你的程序中很容易的加入新的配置单元。方便的属性添加使程序更具有扩展性。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

