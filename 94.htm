<html>

<head>
  <title>15.4 使用全局表 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;15.4 使用全局表</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>上面这些创建</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的方法的缺点是：他们要求程序员注意很多东西，比如，在声明的时候也很容易忘掉</span><span
lang=EN-US>local</span><span style='font-family:宋体'>关键字。全局变量表的</span><span
lang=EN-US>Metamethods</span><span style='font-family:宋体'>提供了一些有趣的技术，也可以用来实现</span><span
lang=EN-US>package</span><span style='font-family:宋体'>。这些技术中共同之处在于：</span><span
lang=EN-US>package</span><span style='font-family:宋体'>使用独占的环境。这很容易实现：如果我们改变了</span><span
lang=EN-US>package</span><span style='font-family:宋体'>主</span><span lang=EN-US>chunk</span><span
style='font-family:宋体'>的环境，那么由</span><span lang=EN-US>package</span><span
style='font-family:宋体'>创建的所有函数都共享这个新的环境。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最简单的技术实现。一旦</span><span
lang=EN-US>package</span><span style='font-family:宋体'>有一个独占的环境，不仅所有她的函数共享环境，而且它的所有全局变量也共享这个环境。所以，我们可以将所有的公有函数声明为全局变量，然后他们会自动作为独立的表（表指</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的名字）存在，所有</span><span
lang=EN-US>package</span><span style='font-family:宋体'>必须要做的是将这个表注册为</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的名字。下面这段代码阐述了复数库使用这种技术的结果：</span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,232,244)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> P = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>complex = P</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,220,248)'><span
lang=EN-US>setfenv(1, P)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在，当我们声明函数</span><span
lang=EN-US>add,</span><span style='font-family:宋体'>她会自动变成</span><span
lang=EN-US> complex.add: </span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,248,243)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> add (c1, c2)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> new(c1.r +
c2.r, c1.i + c2.i)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,238,220)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>另外，我们可以在这个</span><span
lang=EN-US>package</span><span style='font-family:宋体'>中不需要前缀调用其他的函数。例如，</span><span
lang=EN-US>add</span><span style='font-family:宋体'>函数调用</span><span lang=EN-US>new</span><span
style='font-family:宋体'>函数，环境会自动转换为</span><span lang=EN-US>complex.new</span><span
style='font-family:宋体'>。这种方法提供了对</span><span lang=EN-US>package</span><span
style='font-family:宋体'>很好的支持：程序员几乎不需要做什么额外的工作，调用同一个</span><span lang=EN-US>package</span><span
style='font-family:宋体'>内的函数不需要前缀，调用公有和私有函数也没什么区别。如果程序员忘记了</span><span
lang=EN-US>local</span><span style='font-family:宋体'>关键字，也不会污染全局命名空间，只不过使得私有函数变成公有函数而已。另外，我们可以将这种技术和前一节我们使用的</span><span
lang=EN-US>package</span><span style='font-family:宋体'>名的方法组合起来：</span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,243,230)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> P = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- package</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US> _REQUIREDNAME == <span
style='color:blue'>nil</span> <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,230,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; complex = P</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>else</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,236,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; _G[_REQUIREDNAME] = P</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,231,233)'><span
lang=EN-US>setfenv(1, P)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这样就不能访问其他的</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>了。一旦我们将一个空表</span><span
lang=EN-US>P</span><span style='font-family:宋体'>作为我们的环境，我们就失去了访问所有以前的全局变量。下面有好几种方法可以解决这个问题，但都各有利弊。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最简单的解决方法是使用继承，像前面我们看到的一样：</span><span
lang=EN-US> </span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,241,221)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> P = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- package</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setmetatable(P, {__index = _G})</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,234,238)'><span
lang=EN-US>setfenv(1, P)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（你必须在调用</span><span
lang=EN-US>setfenv</span><span style='font-family:宋体'>之前调用</span><span
lang=EN-US>setmetatable</span><span style='font-family:宋体'>，你能说出原因么？）使用这种结构，</span><span
lang=EN-US>package</span><span style='font-family:宋体'>就可以直接访问所有的全局标示符，但必须为每一个访问付出一小点代价。理论上来讲，这种解决方法带来一个有趣的结果：你的</span><span
lang=EN-US>package</span><span style='font-family:宋体'>现在包含了所有的全局变量。例如，使用你的</span><span
lang=EN-US>package</span><span style='font-family:宋体'>人也可以调用标准库的</span><span
lang=EN-US>sin</span><span style='font-family:宋体'>函数：</span><span lang=EN-US>complex.math.sin(x)</span><span
style='font-family:宋体'>。（</span><span lang=EN-US>Perl's package </span><span
style='font-family:宋体'>系统也有这种特性）</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>另外一种快速的访问其他</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>的方法是声明一个局部变量来保存老的环境：</span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,238,241)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> P = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>pack = P</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,228,235)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> _G = _G</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setfenv(1, P)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在，你必须对外部的访问加上前缀</span><span
lang=EN-US>_G.</span><span style='font-family:宋体'>，但是访问速度更快，因为这不涉及到</span><span
lang=EN-US>metamethod</span><span style='font-family:宋体'>。与继承不同的是这种方法，使得你可以访问老的环境；这种方法的好与坏是有争议的，但是有时候你可能需要这种灵活性。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一个更加正规的方法是：只把你需要的函数或者</span><span
lang=EN-US>packages</span><span style='font-family:宋体'>声明为</span><span
lang=EN-US>local</span><span style='font-family:宋体'>：</span></p>

<div style='border:RGB(160,43,212) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(243,220,224);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> P = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,247,248)'><span
lang=EN-US>pack = P</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,236,244)'><span
lang=EN-US style='color:green'>-- Import Section:</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,234,228)'><span
lang=EN-US style='color:green'>-- declare everything this package needs from
outside</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> sqrt = math.sqrt</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,224,227)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> io = io</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,230,251)'><span
lang=EN-US style='color:green'>-- no more external access after this point</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>setfenv(1, P)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这一技术要求稍多，但他使你的</span><span
lang=EN-US>package</span><span style='font-family:宋体'>的独立性比较好。他的速度也比前面那几种方法快。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

