<html>

<head>
  <title>7.1 迭代器与闭包 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;7.1 迭代器与闭包</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中我们常常使用函数来描述迭代器，每次调用该函数就返回集合的下一个元素。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>迭代器需要保留上一次成功调用的状态和下一次成功调用的状态，也就是他知道来自于哪里和将要前往哪里。闭包提供的机制可以很容易实现这个任务。记住：闭包是一个内部函数，它可以访问一个或者多个外部函数的外部局部变量。每次闭包的成功调用后这些外部局部变量都保存他们的值（状态）。当然如果要创建一个闭包必须要创建其外部局部变量。所以一个典型的闭包的结构包含两个函数：一个是闭包自己；另一个是工厂（创建闭包的函数）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>举一个简单的例子，我们为一个</span><span
lang=EN-US>list</span><span style='font-family:宋体'>写一个简单的迭代器，与</span><span
lang=EN-US>ipairs()</span><span style='font-family:宋体'>不同的是我们实现的这个迭代器返回元素的值而不是索引下标：</span></p>

<div style='border:RGB(79,252,221) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,241,250)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> list_iter (t)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> i = 0</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,243,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> n =
table.getn(t)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>function</span> ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,252,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
i &lt;= n <span style='color:blue'>then</span> <span style='color:blue'>return</span>
t[i] <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,235,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个例子中</span><span
lang=EN-US>list_iter</span><span style='font-family:宋体'>是一个工厂，每次调用他都会创建一个新的闭包（迭代器本身）。闭包保存内部局部变量</span><span
lang=EN-US>(t,i,n)</span><span style='font-family:宋体'>，因此每次调用他返回</span><span
lang=EN-US>list</span><span style='font-family:宋体'>中的下一个元素值，当</span><span
lang=EN-US>list</span><span style='font-family:宋体'>中没有值时，返回</span><span
lang=EN-US>nil.</span><span style='font-family:宋体'>我们可以在</span><span
lang=EN-US>while</span><span style='font-family:宋体'>语句中使用这个迭代器：</span></p>

<div style='border:RGB(79,252,221) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(230,240,222);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>t = {10, 20, 30}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,232,240)'><span
lang=EN-US>iter = list_iter(t)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- creates the iterator</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> <span
style='color:blue'>true</span> <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,252,221)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> element =
iter()&nbsp;&nbsp; <span style='color:green'>-- calls the iterator</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> element == <span
style='color:blue'>nil</span> <span style='color:blue'>then</span> <span
style='color:blue'>break</span> <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,227,225)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(element)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>我们设计的这个迭代器也很容易用于范性</span><span
lang=EN-US>for</span><span style='font-family:宋体'>语句</span></p>

<div style='border:RGB(79,252,221) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(249,234,241);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>t = {10, 20, 30}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,244,252)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> element <span
style='color:blue'>in</span> list_iter(t) <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(element)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,250,221)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>范性</span><span
lang=EN-US>for</span><span style='font-family:宋体'>为迭代循环处理所有的薄记（</span><span
lang=EN-US>bookkeeping</span><span style='font-family:宋体'>）：首先调用迭代工厂；内部保留迭代函数，因此我们不需要</span><span
lang=EN-US>iter</span><span style='font-family:宋体'>变量；然后在每一个新的迭代处调用迭代器函数；当迭代器返回</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>时循环结束（后面我们将看到范性</span><span
lang=EN-US>for</span><span style='font-family:宋体'>能胜任更多的任务）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面看一个稍微复杂一点的例子：我们写一个迭代器遍历一个文件内的所有匹配的单词。为了实现目的，我们需要保留两个值：当前行和在当前行的偏移量，我们使用两个外部局部变量</span><span
lang=EN-US>line</span><span style='font-family:宋体'>、</span><span lang=EN-US>pos</span><span
style='font-family:宋体'>保存这两个值。</span></p>

<div style='border:RGB(79,252,221) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,245,236)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> allwords()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> line =
io.read()&nbsp;&nbsp; <span style='color:green'>-- current line</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,242,232)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> pos = 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- current position in the line</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>function</span> ()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- iterator function</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,247,238)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span>
line <span style='color:blue'>do</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- repeat while there are lines</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span>
s, e = string.find(line, <span style='color:red'>&quot;%w+&quot;</span>, pos)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,255,238)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>if</span> s <span style='color:blue'>then</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- found a word?</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos
= e + 1&nbsp;&nbsp; <span style='color:green'>-- next position is after this
word</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,252,223)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> string.sub(line, s, e) <span style='color:
green'>-- return the word</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,229,246)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line
= io.read()&nbsp; <span style='color:green'>-- word not found; try next line</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos
= 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>-- restart
from first position</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,229,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,225,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>nil</span>&nbsp;&nbsp;&nbsp; <span style='color:green'>-- no
more lines: end of traversal</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,224,231)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>迭代函数的主体部分调用了</span><span
lang=EN-US>string.find</span><span style='font-family:宋体'>函数，</span><span
lang=EN-US>string.find</span><span style='font-family:宋体'>在当前行从当前位置开始查找匹配的单词，例子中匹配的单词使用模式</span><span
lang=EN-US>'%w+'</span><span style='font-family:宋体'>描述的；如果查找到一个单词，迭代函数更新当前位置</span><span
lang=EN-US>pos</span><span style='font-family:宋体'>为单词后的第一个位置，并且返回这个单词（</span><span
lang=EN-US>string.sub</span><span style='font-family:宋体'>函数从</span><span
lang=EN-US>line</span><span style='font-family:宋体'>中提取两个位置参数之间的子串）。否则迭代函数读取新的一行并重新搜索。如果没有</span><span
lang=EN-US>line</span><span style='font-family:宋体'>可读返回</span><span lang=EN-US>nil</span><span
style='font-family:宋体'>结束。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>尽管迭代函数有些复杂，但使用起来是很直观的：</span></p>

<div style='border:RGB(79,252,221) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,252,243)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> word <span
style='color:blue'>in</span> allwords() <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(word)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,231,220)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>通常情况下，迭代函数大都难写易用。这不是大问题，一般</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>编程不需要自己写迭代函数，语言本身提供了许多。当然，必要时，自己动手构造一二亦可。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

