<html>

<head>
  <title>16.1 类 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;16.1 类</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一些面向对象的语言中提供了类的概念，作为创建对象的模板。在这些语言里，对象是类的实例。</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>不存在类的概念，每个对象定义他自己的行为并拥有自己的形状（</span><span
lang=EN-US>shape</span><span style='font-family:宋体'>）。然而，依据基于原型（</span><span
lang=EN-US>prototype</span><span style='font-family:宋体'>）的语言比如</span><span
lang=EN-US>Self</span><span style='font-family:宋体'>和</span><span lang=EN-US>NewtonScript</span><span
style='font-family:宋体'>，在</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中仿效类的概念并不难。在这些语言中，对象没有类。相反，每个对象都有一个</span><span
lang=EN-US>prototype</span><span style='font-family:宋体'>（原型），当调用不属于对象的某些操作时，会最先会到</span><span
lang=EN-US>prototype</span><span style='font-family:宋体'>中查找这些操作。在这类语言中实现类（</span><span
lang=EN-US>class</span><span style='font-family:宋体'>）的机制，我们创建一个对象，作为其它对象的原型即可（原型对象为类，其它对象为类的</span><span
lang=EN-US>instance</span><span style='font-family:宋体'>）。类与</span><span
lang=EN-US>prototype</span><span style='font-family:宋体'>的工作机制相同，都是定义了特定对象的行为。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中，使用前面章节我们介绍过的继承的思想，很容易实现</span><span
lang=EN-US>prototypes.</span><span style='font-family:宋体'>更明确的来说，如果我们有两个对象</span><span
lang=EN-US>a</span><span style='font-family:宋体'>和</span><span lang=EN-US>b</span><span
style='font-family:宋体'>，我们想让</span><span lang=EN-US>b</span><span
style='font-family:宋体'>作为</span><span lang=EN-US>a</span><span
style='font-family:宋体'>的</span><span lang=EN-US>prototype</span><span
style='font-family:宋体'>只需要：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,232,248)'><span
lang=EN-US>setmetatable(a, {__index = b})</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这样，对象</span><span
lang=EN-US>a</span><span style='font-family:宋体'>调用任何不存在的成员都会到对象</span><span
lang=EN-US>b</span><span style='font-family:宋体'>中查找。术语上，可以将</span><span
lang=EN-US>b</span><span style='font-family:宋体'>看作类，</span><span lang=EN-US>a</span><span
style='font-family:宋体'>看作对象。回到前面银行账号的例子上。为了使得新创建的对象拥有和</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>相似的行为，我们使用</span><span lang=EN-US>__index metamethod</span><span
style='font-family:宋体'>，使新的对象继承</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>。注意一个小的优化：我们不需要创建一个额外的表作为</span><span lang=EN-US>account</span><span
style='font-family:宋体'>对象的</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>；我们可以用</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>表本身作为</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,221,248)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> Account:new (o)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; o = o <span style='color:blue'>or</span> {}&nbsp;&nbsp; <span
style='color:green'>-- create object if user does not provide one</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,236,253)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; setmetatable(o, self)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; self.__index = self</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(224,230,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> o</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（当我们调用</span><span
lang=EN-US>Account:new</span><span style='font-family:宋体'>时，</span><span
lang=EN-US>self</span><span style='font-family:宋体'>等于</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>；因此我们可以直接使用</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>取代</span><span lang=EN-US>self</span><span
style='font-family:宋体'>。然而，使用</span><span lang=EN-US>self</span><span
style='font-family:宋体'>在我们下一节介绍类继承时更合适）。有了这段代码之后，当我们创建一个新的账号并且掉用一个方法的时候，有什么发生呢？</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(252,237,234);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>a = Account:new{balance = 0}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(236,253,235)'><span
lang=EN-US>a:deposit(100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当我们创建这个新的账号</span><span
lang=EN-US>a</span><span style='font-family:宋体'>的时候，</span><span lang=EN-US>a</span><span
style='font-family:宋体'>将</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>作为他的</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>（调用</span><span lang=EN-US>Account:new</span><span
style='font-family:宋体'>时，</span><span lang=EN-US>self</span><span
style='font-family:宋体'>即</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>）。当我们调用</span><span lang=EN-US>a:deposit(100.00)</span><span
style='font-family:宋体'>，我们实际上调用的是</span><span lang=EN-US>a.deposit(a,100.00)</span><span
style='font-family:宋体'>（冒号仅仅是语法上的便利）。然而，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>在表</span><span lang=EN-US>a</span><span
style='font-family:宋体'>中找不到</span><span lang=EN-US>deposit</span><span
style='font-family:宋体'>，因此他回到</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>的</span><span lang=EN-US>__index</span><span
style='font-family:宋体'>对应的表中查找，情况大致如下：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,227,237)'><span
lang=EN-US>getmetatable(a).__index.deposit(a, 100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>a</span><span
style='font-family:宋体'>的</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>是</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>，</span><span lang=EN-US>Account.__index</span><span
style='font-family:宋体'>也是</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>（因为</span><span lang=EN-US>new</span><span
style='font-family:宋体'>函数中</span><span lang=EN-US>self.__index = self</span><span
style='font-family:宋体'>）。所以我们可以重写上面的代码为：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,251,247)'><span
lang=EN-US>Account.deposit(a, 100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>也就是说，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>传递</span><span lang=EN-US>a</span><span
style='font-family:宋体'>作为</span><span lang=EN-US>self</span><span
style='font-family:宋体'>参数调用原始的</span><span lang=EN-US>deposit</span><span
style='font-family:宋体'>函数。所以，新的账号对象从</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>继承了</span><span lang=EN-US>deposit</span><span
style='font-family:宋体'>方法。使用同样的机制，可以从</span><span lang=EN-US>Account</span><span
style='font-family:宋体'>继承所有的域。继承机制不仅对方法有效，对表中所有的域都有效。所以，一个类不仅提供方法，也提供了他的实例的成员的默认值。记住：在我们第一个</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>定义中，我们提供了成员</span><span
lang=EN-US>balance</span><span style='font-family:宋体'>默认值为</span><span
lang=EN-US>0</span><span style='font-family:宋体'>，所以，如果我们创建一个新的账号而没有提供</span><span
lang=EN-US>balance</span><span style='font-family:宋体'>的初始值，他将继承默认值：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,220,227)'><span
lang=EN-US>b = Account:new()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(b.balance)&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--&gt;
0</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当我们调用</span><span
lang=EN-US>b</span><span style='font-family:宋体'>的</span><span lang=EN-US>deposit</span><span
style='font-family:宋体'>方法时，实际等价于：</span></p>

<div style='border:RGB(57,118,17) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(237,240,232);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>b.balance = b.balance + v</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（因为</span><span
lang=EN-US>self</span><span style='font-family:宋体'>就是</span><span lang=EN-US>b</span><span
style='font-family:宋体'>）。表达式</span><span lang=EN-US>b.balance</span><span
style='font-family:宋体'>等于</span><span lang=EN-US>0</span><span
style='font-family:宋体'>并且初始的存款（</span><span lang=EN-US>b.balance</span><span
style='font-family:宋体'>）被赋予</span><span lang=EN-US>b.balance</span><span
style='font-family:宋体'>。下一次我们访问这个值的时候，不会在涉及到</span><span lang=EN-US>index metamethod</span><span
style='font-family:宋体'>，因为</span><span lang=EN-US>b</span><span
style='font-family:宋体'>已经存在他自己的</span><span lang=EN-US>balance</span><span
style='font-family:宋体'>域。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

