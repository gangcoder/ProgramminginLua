<html>

<head>
  <title>7.4 多状态的迭代器 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;7.4 多状态的迭代器</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>很多情况下，迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，最简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到</span><span
lang=EN-US>table</span><span style='font-family:宋体'>内，将</span><span lang=EN-US>table</span><span
style='font-family:宋体'>作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在</span><span lang=EN-US>table</span><span
style='font-family:宋体'>内，所以迭代函数通常不需要第二个参数。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面我们重写</span><span
lang=EN-US>allwords</span><span style='font-family:宋体'>迭代器，这一次我们不是使用闭包而是使用带有两个域（</span><span
lang=EN-US>line, pos</span><span style='font-family:宋体'>）的</span><span
lang=EN-US>table</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>开始迭代的函数是很简单的，他必须返回迭代函数和初始状态：</span></p>

<div style='border:RGB(250,34,69) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,234,232)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> iterator&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- to be defined later</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,255,236)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> allwords()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> state =
{line = io.read(), pos = 1}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,222,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> iterator,
state</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>真正的处理工作是在迭代函数内完成：</span></p>

<div style='border:RGB(250,34,69) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(237,236,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> iterator (state)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,230,247)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span> state.line <span
style='color:blue'>do</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- repeat while there are lines</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--
search for next word</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(225,239,228)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span>
s, e = string.find(state.line, <span style='color:red'>&quot;%w+&quot;</span>,
state.pos)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
s <span style='color:blue'>then</span>&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- found a word?</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,246,242)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- update next position (after this word)</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state.pos =
e + 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,228,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> string.sub(state.line, s, e)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span>&nbsp;&nbsp; <span
style='color:green'>-- word not found</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,237,250)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state.line
= io.read()&nbsp;&nbsp; <span style='color:green'>-- try next line...</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state.pos
= 1&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>-- ... from first
position</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,246,253)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,225,244)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>nil</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- no more lines: end loop</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>我们应该尽可能的写无状态的迭代器，因为这样循环的时候由</span><span
lang=EN-US>for</span><span style='font-family:宋体'>来保存状态，不需要创建对象花费的代价小；如果不能用无状态的迭代器实现，应尽可能使用闭包；尽可能不要使用</span><span
lang=EN-US>table</span><span style='font-family:宋体'>这种方式，因为创建闭包的代价要比创建</span><span
lang=EN-US>table</span><span style='font-family:宋体'>小，另外</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>处理闭包要比处理</span><span
lang=EN-US>table</span><span style='font-family:宋体'>速度快些。后面我们还将看到另一种使用协同来创建迭代器的方式，这种方式功能更强但更复杂。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

