<html>

<head>
  <title>21.1 简单I/O模式 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;21.1 简单I/O模式</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>简单模式的所有操作都是在两个当前文件之上。</span><span
lang=EN-US>I/O</span><span style='font-family:宋体'>库将当前输入文件作为标准输入（</span><span
lang=EN-US>stdin</span><span style='font-family:宋体'>），将当前输出文件作为标准输出（</span><span
lang=EN-US>stdout</span><span style='font-family:宋体'>）。这样当我们执行</span><span
lang=EN-US>io.read</span><span style='font-family:宋体'>，就是在标准输入中读取一行。我们可以使用</span><span
lang=EN-US>io.input</span><span style='font-family:宋体'>和</span><span
lang=EN-US>io.output</span><span style='font-family:宋体'>函数来改变当前文件。例如</span><span
lang=EN-US>io.input(filename)</span><span style='font-family:宋体'>就是打开给定文件（以读模式），并将其设置为当前输入文件。接下来所有的输入都来自于该文，直到再次使用</span><span
lang=EN-US>io.input</span><span style='font-family:宋体'>。</span><span
lang=EN-US>io.output</span><span style='font-family:宋体'>函数。类似于</span><span
lang=EN-US>io.input</span><span style='font-family:宋体'>。一旦产生错误两个函数都会产生错误。如果你想直接控制错误必须使用完全模式中</span><span
lang=EN-US>io.read</span><span style='font-family:宋体'>函数。写操作较读操作简单，我们先从写操作入手。下面这个例子里函数</span><span
lang=EN-US>io.write</span><span style='font-family:宋体'>获取任意数目的字符串参数，接着将它们写到当前的输出文件。通常数字转换为字符串是按照通常的规则，如果要控制这一转换，可以使用</span><span
lang=EN-US>string</span><span style='font-family:宋体'>库中的</span><span
lang=EN-US>format</span><span style='font-family:宋体'>函数：</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,241,253)'><span
lang=EN-US>&gt; io.write(<span style='color:red'>&quot;sin (3) = &quot;</span>,
math.sin(3), <span style='color:red'>&quot;\n&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp; <span style='color:green'>--&gt; sin (3) = 0.1411200080598672</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,236,248)'><span
lang=EN-US>&gt; io.write(string.format(<span style='color:red'>&quot;sin (3) =
%.4f\n&quot;</span>, math.sin(3)))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp; <span style='color:green'>--&gt; sin (3) = 0.1411</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在编写代码时应当避免像</span><span
lang=EN-US>io.write(a..b..c)</span><span style='font-family:宋体'>；这样的书写，这同</span><span
lang=EN-US>io.write(a,b,c)</span><span style='font-family:宋体'>的效果是一样的。但是后者因为避免了串联操作，而消耗较少的资源。原则上当你进行粗略（</span><span
lang=EN-US>quick and dirty</span><span style='font-family:宋体'>）编程，或者进行排错时常使用</span><span
lang=EN-US>print</span><span style='font-family:宋体'>函数。当需要完全控制输出时使用</span><span
lang=EN-US>write</span><span style='font-family:宋体'>。</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(254,253,233);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&gt; print(<span style='color:red'>&quot;hello&quot;</span>, <span
style='color:red'>&quot;Lua&quot;</span>); print(<span style='color:red'>&quot;Hi&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,235,249)'><span
lang=EN-US>&nbsp; <span style='color:green'>--&gt; hello&nbsp;&nbsp; Lua</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp; <span style='color:green'>--&gt; Hi</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,254,227)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&gt; io.write(<span style='color:red'>&quot;hello&quot;</span>, <span
style='color:red'>&quot;Lua&quot;</span>); io.write(<span style='color:red'>&quot;Hi&quot;</span>,
<span style='color:red'>&quot;\n&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,234,251)'><span
lang=EN-US>&nbsp; <span style='color:green'>--&gt; helloLuaHi</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Write</span><span
style='font-family:宋体'>函数与</span><span lang=EN-US>print</span><span
style='font-family:宋体'>函数不同在于，</span><span lang=EN-US>write</span><span
style='font-family:宋体'>不附加任何额外的字符到输出中去，例如制表符，换行符等等。还有</span><span lang=EN-US>write</span><span
style='font-family:宋体'>函数是使用当前输出文件，而</span><span lang=EN-US>print</span><span
style='font-family:宋体'>始终使用标准输出。另外</span><span lang=EN-US>print</span><span
style='font-family:宋体'>函数会自动调用参数的</span><span lang=EN-US>tostring</span><span
style='font-family:宋体'>方法，所以可以显示出表（</span><span lang=EN-US>tables</span><span
style='font-family:宋体'>）函数（</span><span lang=EN-US>functions</span><span
style='font-family:宋体'>）和</span><span lang=EN-US>nil</span><span
style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>read</span><span
style='font-family:宋体'>函数从当前输入文件读取串，由它的参数控制读取的内容：</span></p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=88 valign=top style='width:65.7pt;border:none;border-top:solid green 1.5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US>&quot;*all&quot;</span></p>
  </td>
  <td width=166 valign=top style='width:124.8pt;border:none;border-top:solid green 1.5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-family:宋体'>读取整个文件</span></p>
  </td>
 </tr>
 <tr>
  <td width=88 valign=top style='width:65.7pt;border:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US>&quot;*line&quot;</span></p>
  </td>
  <td width=166 valign=top style='width:124.8pt;border:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-family:宋体'>读取下一行</span></p>
  </td>
 </tr>
 <tr>
  <td width=88 valign=top style='width:65.7pt;border:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US>&quot;*number&quot;</span></p>
  </td>
  <td width=166 valign=top style='width:124.8pt;border:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-family:宋体'>从串中转换出一个数值</span></p>
  </td>
 </tr>
 <tr>
  <td width=88 valign=top style='width:65.7pt;border:none;border-bottom:solid green 1.5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span lang=EN-US>num</span></p>
  </td>
  <td width=166 valign=top style='width:124.8pt;border:none;border-bottom:solid green 1.5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=a><span style='font-family:宋体'>读取</span><span lang=EN-US>num</span><span
  style='font-family:宋体'>个字符到串</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>io.read(&quot;*all&quot;)</span><span
style='font-family:宋体'>函数从当前位置读取整个输入文件。如果当前位置在文件末尾，或者文件为空，函数将返回空串。由于</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>对长串类型值的有效管理，在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中使用过滤器的简单方法就是读取整个文件到串中去，处理完之后（例如使用函数</span><span
lang=EN-US>gsub</span><span style='font-family:宋体'>），接着写到输出中去：</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,223,226)'><span
lang=EN-US>t =
io.read(&quot;*all&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --
read the whole file</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>t = string.gsub(t, ...)&nbsp;&nbsp;&nbsp;&nbsp; -- do the job</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,240,252)'><span
lang=EN-US>io.write(t)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- write the file</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>以下代码是一个完整的处理字符串的例子。文件的内容要使用</span><span
lang=EN-US>MIME</span><span style='font-family:宋体'>（多用途的网际邮件扩充协议）中的</span><span
lang=EN-US>quoted-printable</span><span style='font-family:宋体'>码进行编码。以这种形式编码，非</span><span
lang=EN-US>ASCII</span><span style='font-family:宋体'>字符将被编码为“</span><span
lang=EN-US>=XX</span><span style='font-family:宋体'>”，其中</span><span lang=EN-US>XX</span><span
style='font-family:宋体'>是该字符值的十六进制表示，为表示一致性“</span><span lang=EN-US>=</span><span
style='font-family:宋体'>”字符同样要求被改写。在</span><span lang=EN-US>gsub</span><span
style='font-family:宋体'>函数中的“模式”参数的作用就是得到所有值在</span><span lang=EN-US>128</span><span
style='font-family:宋体'>到</span><span lang=EN-US>255</span><span
style='font-family:宋体'>之间的字符，给它们加上等号标志。</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,237,231)'><span
lang=EN-US>t = io.read(<span style='color:red'>&quot;*all&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>t = string.gsub(t, <span style='color:red'>&quot;([\128-\255=])&quot;</span>,
<span style='color:blue'>function</span> (c)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,229,223)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
string.format(<span style='color:red'>&quot;=%02X&quot;</span>, string.byte(c))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span><span lang=EN-US>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,226,229)'><span
lang=EN-US>io.write(t)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>该程序在奔腾</span><span
lang=EN-US>333MHz</span><span style='font-family:宋体'>环境下转换</span><span
lang=EN-US>200k</span><span style='font-family:宋体'>字符需要</span><span lang=EN-US>0.2</span><span
style='font-family:宋体'>秒。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>io.read(&quot;*line&quot;)</span><span
style='font-family:宋体'>函数返回当前输入文件的下一行（不包含最后的换行符）。当到达文件末尾，返回值为</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>（表示没有下一行可返回）。该读取方式是</span><span
lang=EN-US>read</span><span style='font-family:宋体'>函数的默认方式，所以可以简写为</span><span
lang=EN-US>io.read()</span><span style='font-family:宋体'>。通常使用这种方式读取文件是由于对文件的操作是自然逐行进行的，否则更倾向于使用</span><span
lang=EN-US>*all</span><span style='font-family:宋体'>一次读取整个文件，或者稍后见到的逐块的读取文件。下面的程序演示了应如何使用该模式读取文件。此程序复制当前输入文件到输出文件，并记录行数。</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,227,224)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> count = 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> <span
style='color:blue'>true</span> <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,240,238)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> line =
io.read()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> line == <span
style='color:blue'>nil</span> <span style='color:blue'>then</span> <span
style='color:blue'>break</span> <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,241,232)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; io.write(string.format(<span style='color:red'>&quot;%6d&nbsp;
&quot;</span>, count), line, <span style='color:red'>&quot;\n&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; count = count + 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,233,243)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>然而为了在整个文件中逐行迭代。我们最好使用</span><span
lang=EN-US>io.lines</span><span style='font-family:宋体'>迭代器。例如对文件的行进行排序的程序如下：</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,242,224)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> lines = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- read the lines in table 'lines'</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,223,241)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> line <span
style='color:blue'>in</span> io.lines() <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; table.insert(lines, line)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,235,221)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- sort</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,229,250)'><span
lang=EN-US>table.sort(lines)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:green'>-- write all the lines</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,241,223)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> i, l <span
style='color:blue'>in</span> ipairs(lines) <span style='color:blue'>do</span>
io.write(l, <span style='color:red'>&quot;\n&quot;</span>) <span
style='color:blue'>end</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在奔腾</span><span
lang=EN-US>333MHz</span><span style='font-family:宋体'>上该程序处理处理</span><span
lang=EN-US>4.5MB</span><span style='font-family:宋体'>大小，</span><span lang=EN-US>32K</span><span
style='font-family:宋体'>行的文件耗时</span><span lang=EN-US>1.8</span><span
style='font-family:宋体'>秒，比使用高度优化的</span><span lang=EN-US>C</span><span
style='font-family:宋体'>语言系统排序程序快</span><span lang=EN-US>0.6</span><span
style='font-family:宋体'>秒。</span><span lang=EN-US>io.read(&quot;*number&quot;)</span><span
style='font-family:宋体'>函数从当前输入文件中读取出一个数值。只有在该参数下</span><span lang=EN-US>read</span><span
style='font-family:宋体'>函数才返回数值，而不是字符串。当需要从一个文件中读取大量数字时，数字间的字符串为空白可以显著的提高执行性能。</span><span
lang=EN-US>*number</span><span style='font-family:宋体'>选项会跳过两个可被识别数字之间的任意空格。这些可识别的字符串可以是</span><span
lang=EN-US>-3</span><span style='font-family:宋体'>、</span><span lang=EN-US>+5.2</span><span
style='font-family:宋体'>、</span><span lang=EN-US>1000</span><span
style='font-family:宋体'>，和</span><span lang=EN-US> -3.4e-23</span><span
style='font-family:宋体'>。如果在当前位置找不到一个数字（由于格式不对，或者是到了文件的结尾），则返回</span><span
lang=EN-US>nil </span><span style='font-family:宋体'>可以对每个参数设置选项，函数将返回各自的结果。假如有一个文件每行包含三个数字：</span></p>

<div style='border:dashed windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,239,249)'><span
lang=EN-US>6.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -3.23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15e12</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>4.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 234&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000001</span></p>

<p class=AltP style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,229,221)'><span
lang=EN-US>...</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在要打印出每行最大的一个数，就可以使用一次</span><span
lang=EN-US>read</span><span style='font-family:宋体'>函数调用来读取出每行的全部三个数字：</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,222,253)'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> <span
style='color:blue'>true</span> <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> n1, n2, n3
= io.read(<span style='color:red'>&quot;*number&quot;</span>, <span
style='color:red'>&quot;*number&quot;</span>, <span style='color:red'>&quot;*number&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,235,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> <span
style='color:blue'>not</span> n1 <span style='color:blue'>then</span> <span
style='color:blue'>break</span> <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(math.max(n1, n2, n3))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,246,220)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在任何情况下，都应该考虑选择使用</span><span
lang=EN-US>io.read</span><span style='font-family:宋体'>函数的</span><span
lang=EN-US> &quot; *.all &quot; </span><span style='font-family:宋体'>选项读取整个文件，然后使用</span><span
lang=EN-US>gfind</span><span style='font-family:宋体'>函数来分解：</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,226,249)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> pat = <span
style='color:red'>&quot;(%S+)%s+(%S+)%s+(%S+)%s+&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> n1, n2, n3 <span
style='color:blue'>in</span> string.gfind(io.read(<span style='color:red'>&quot;*all&quot;</span>),
pat) <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,234,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; print(math.max(n1, n2, n3))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>除了基本读取方式外，还可以将数值</span><span
lang=EN-US>n</span><span style='font-family:宋体'>作为</span><span lang=EN-US>read</span><span
style='font-family:宋体'>函数的参数。在这样的情况下</span><span lang=EN-US>read</span><span
style='font-family:宋体'>函数将尝试从输入文件中读取</span><span lang=EN-US>n</span><span
style='font-family:宋体'>个字符。如果无法读取到任何字符（已经到了文件末尾），函数返回</span><span lang=EN-US>nil</span><span
style='font-family:宋体'>。否则返回一个最多包含</span><span lang=EN-US>n</span><span
style='font-family:宋体'>个字符的串。以下是关于该</span><span lang=EN-US>read</span><span
style='font-family:宋体'>函数参数的一个进行高效文件复制的例子程序（当然是指在</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中）</span></p>

<div style='border:RGB(137,10,187) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(227,252,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> size = 2^13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- good buffer size (8K)</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,224,234)'><span
lang=EN-US style='color:blue'>while</span><span lang=EN-US> <span
style='color:blue'>true</span> <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> block =
io.read(size)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,243,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> <span
style='color:blue'>not</span> block <span style='color:blue'>then</span> <span
style='color:blue'>break</span> <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; io.write(block)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,235,231)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>特别的，</span><span
lang=EN-US>io.read(0)</span><span style='font-family:宋体'>函数的可以用来测试是否到达了文件末尾。如果不是返回一个空串，如果已是文件末尾返回</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

