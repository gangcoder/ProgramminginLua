<html>

<head>
  <title>6.1 闭包 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;6.1 闭包</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当一个函数内部嵌套另一个函数定义时，内部的函数体可以访问外部的函数的局部变量，这种特征我们称作词法定界。虽然这看起来很清楚，事实并非如此，词法定界加上第一类函数在编程语言里是一个功能强大的概念，很少语言提供这种支持。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面看一个简单的例子，假定有一个学生姓名的列表和一个学生名和成绩对应的表；现在想根据学生的成绩从高到低对学生进行排序，可以这样做：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,240,238)'><span
lang=EN-US>names = {<span style='color:red'>&quot;Peter&quot;</span>, <span
style='color:red'>&quot;Paul&quot;</span>, <span style='color:red'>&quot;Mary&quot;</span>}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>grades = {Mary = 10, Paul = 7, Peter = 8}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(243,254,231)'><span
lang=EN-US>table.sort(names, <span style='color:blue'>function</span> (n1, n2)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> grades[n1]
&gt; grades[n2]&nbsp;&nbsp;&nbsp; <span style='color:green'>-- compare the
grades</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,254,246)'><span
lang=EN-US style='color:blue'>end</span><span lang=EN-US>)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>假定创建一个函数实现此功能：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,231,220)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> sortbygrade
(names, grades)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; table.sort(names, <span style='color:blue'>function</span>
(n1, n2)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,240,220)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
grades[n1] &gt; grades[n2]&nbsp;&nbsp;&nbsp; <span style='color:green'>--
compare the grades</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,244,239)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>例子中包含在</span><span
lang=EN-US>sortbygrade</span><span style='font-family:宋体'>函数内部的</span><span
lang=EN-US>sort</span><span style='font-family:宋体'>中的匿名函数可以访问</span><span
lang=EN-US>sortbygrade</span><span style='font-family:宋体'>的参数</span><span
lang=EN-US>grades</span><span style='font-family:宋体'>，在匿名函数内部</span><span
lang=EN-US>grades</span><span style='font-family:宋体'>不是全局变量也不是局部变量，我们称作外部的局部变量（</span><span
lang=EN-US>external local variable</span><span style='font-family:宋体'>）或者</span><span
lang=EN-US>upvalue</span><span style='font-family:宋体'>。（</span><span
lang=EN-US>upvalue</span><span style='font-family:宋体'>意思有些误导，然而在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中他的存在有历史的根源，还有他比起</span><span
lang=EN-US>external local variable</span><span style='font-family:宋体'>简短）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>看下面的代码：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,243,220)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> newCounter()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> i = 0</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,220,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>function</span>()&nbsp; &nbsp;&nbsp;&nbsp;<span
style='color:green'>-- anonymous function</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,235,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
i</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,241,249)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,232,221)'><span
lang=EN-US>c1 = newCounter()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(c1())&nbsp; <span style='color:green'>--&gt; 1</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,232,251)'><span
lang=EN-US>print(c1())&nbsp; <span style='color:green'>--&gt; 2</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>匿名函数使用</span><span
lang=EN-US>upvalue i</span><span style='font-family:宋体'>保存他的计数，当我们调用匿名函数的时候</span><span
lang=EN-US>i</span><span style='font-family:宋体'>已经超出了作用范围，因为创建</span><span
lang=EN-US>i</span><span style='font-family:宋体'>的函数</span><span lang=EN-US>newCounter</span><span
style='font-family:宋体'>已经返回了。然而</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>用闭包的思想正确处理了这种情况。简单的说，闭包是一个函数以及它的</span><span lang=EN-US>upvalues</span><span
style='font-family:宋体'>。如果我们再次调用</span><span lang=EN-US>newCounter</span><span
style='font-family:宋体'>，将创建一个新的局部变量</span><span lang=EN-US>i</span><span
style='font-family:宋体'>，因此我们得到了一个作用在新的变量</span><span lang=EN-US>i</span><span
style='font-family:宋体'>上的新闭包。</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,231,235)'><span
lang=EN-US>c2 = newCounter()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(c2())&nbsp; <span style='color:green'>--&gt; 1</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(226,255,250)'><span
lang=EN-US>print(c1())&nbsp; <span style='color:green'>--&gt; 3</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>print(c2())&nbsp; <span style='color:green'>--&gt; 2</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>c1</span><span
style='font-family:宋体'>、</span><span lang=EN-US>c2</span><span
style='font-family:宋体'>是建立在同一个函数上，但作用在同一个局部变量的不同实例上的两个不同的闭包。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>技术上来讲，闭包指值而不是指函数，函数仅仅是闭包的一个原型声明；尽管如此，在不会导致混淆的情况下我们继续使用术语函数代指闭包。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>闭包在上下文环境中提供很有用的功能，如前面我们见到的可以作为高级函数（</span><span
lang=EN-US>sort</span><span style='font-family:宋体'>）的参数；作为函数嵌套的函数（</span><span
lang=EN-US>newCounter</span><span style='font-family:宋体'>）。这一机制使得我们可以在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的函数世界里组合出奇幻的编程技术。闭包也可用在回调函数中，比如在</span><span
lang=EN-US>GUI</span><span style='font-family:宋体'>环境中你需要创建一系列</span><span
lang=EN-US>button</span><span style='font-family:宋体'>，但用户按下</span><span
lang=EN-US>button</span><span style='font-family:宋体'>时回调函数被调用，可能不同的按钮被按下时需要处理的任务有点区别。具体来讲，一个十进制计算器需要</span><span
lang=EN-US>10</span><span style='font-family:宋体'>个相似的按钮，每个按钮对应一个数字，可以使用下面的函数创建他们：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(246,254,243);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> digitButton
(digit)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,232,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> Button{&nbsp;
label = digit,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; action
= <span style='color:blue'>function</span> ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,251,252)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add_to_display(digit)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,242,247)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个例子中我们假定</span><span
lang=EN-US>Button</span><span style='font-family:宋体'>是一个用来创建新按钮的工具，</span><span
lang=EN-US> label</span><span style='font-family:宋体'>是按钮的标签，</span><span
lang=EN-US>action</span><span style='font-family:宋体'>是按钮被按下时调用的回调函数。（实际上是一个闭包，因为他访问</span><span
lang=EN-US>upvalue digit</span><span style='font-family:宋体'>）。</span><span
lang=EN-US>digitButton</span><span style='font-family:宋体'>完成任务返回后，局部变量</span><span
lang=EN-US>digit</span><span style='font-family:宋体'>超出范围，回调函数仍然可以被调用并且可以访问局部变量</span><span
lang=EN-US>digit</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>闭包在完全不同的上下文中也是很有用途的。因为函数被存储在普通的变量内我们可以很方便的重定义或者预定义函数。通常当你需要原始函数有一个新的实现时可以重定义函数。例如你可以重定义</span><span
lang=EN-US>sin</span><span style='font-family:宋体'>使其接受一个度数而不是弧度作为参数：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(235,251,224);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>oldSin = math.sin</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,240,247)'><span
lang=EN-US>math.sin = <span style='color:blue'>function</span> (x)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
oldSin(x*math.pi/180)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,228,234)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>更清楚的方式：</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,249,228)'><span
lang=EN-US style='color:blue'>do</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> oldSin =
math.sin</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,255,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> k =
math.pi/180</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; math.sin = <span style='color:blue'>function</span>
(x)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,221,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span>
oldSin(x*k)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,223,238)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这样我们把原始版本放在一个局部变量内，访问</span><span
lang=EN-US>sin</span><span style='font-family:宋体'>的唯一方式是通过新版本的函数。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>利用同样的特征我们可以创建一个安全的环境（也称作沙箱，和</span><span
lang=EN-US>java</span><span style='font-family:宋体'>里的沙箱一样），当我们运行一段不信任的代码（比如我们运行网络服务器上获取的代码）时安全的环境是需要的，比如我们可以使用闭包重定义</span><span
lang=EN-US>io</span><span style='font-family:宋体'>库的</span><span lang=EN-US>open</span><span
style='font-family:宋体'>函数来限制程序打开的文件。</span></p>

<div style='border:RGB(74,188,91) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,231,234)'><span
lang=EN-US style='color:blue'>do</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>local</span> oldOpen =
io.open</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(222,246,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; io.open = <span style='color:blue'>function</span>
(filename, mode)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
access_OK(filename, mode) <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(222,229,251)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> oldOpen(filename, mode)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,241,228)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>return</span> <span style='color:blue'>nil</span>, <span
style='color:red'>&quot;access denied&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(234,234,253)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

