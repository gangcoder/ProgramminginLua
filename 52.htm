<html>

<head>
  <title>8.2 C Packages - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;8.2 C Packages</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>和</span><span lang=EN-US>C</span><span style='font-family:
宋体'>是很容易结合的，使用</span><span lang=EN-US>C</span><span style='font-family:宋体'>为</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>写包。与</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中写包不同，</span><span lang=EN-US>C</span><span
style='font-family:宋体'>包在使用以前必须首先加载并连接，在大多数系统中最容易的实现方式是通过动态连接库机制，然而动态连接库不是</span><span
lang=EN-US>ANSI C</span><span style='font-family:宋体'>的一部分，也就是说在标准</span><span
lang=EN-US>C</span><span style='font-family:宋体'>中实现动态连接是很困难的。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>通常</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>不包含任何不能用标准</span><span
lang=EN-US>C</span><span style='font-family:宋体'>实现的机制，动态连接库是一个特例。我们可以将动态连接库机制视为其他机制之母：一旦我们拥有了动态连接机制，我们就可以动态的加载</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中不存在的机制。所以，在这种特殊情况下，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>打破了他平台兼容的原则而通过条件编译的方式为一些平台实现了动态连接机制。标准的</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>为</span><span lang=EN-US>windows</span><span
style='font-family:宋体'>、</span><span lang=EN-US>Linux</span><span
style='font-family:宋体'>、</span><span lang=EN-US>FreeBSD</span><span
style='font-family:宋体'>、</span><span lang=EN-US>Solaris</span><span
style='font-family:宋体'>和其他一些</span><span lang=EN-US>Unix</span><span
style='font-family:宋体'>平台实现了这种机制，扩展其它平台支持这种机制也是不难的。在</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>提示符下运行</span><span lang=EN-US>print(loadlib())</span><span
style='font-family:宋体'>看返回的结果，如果显示</span><span lang=EN-US>bad arguments</span><span
style='font-family:宋体'>则说明你的发布版支持动态连接机制，否则说明动态连接机制不支持或者没有安装。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>在一个叫</span><span lang=EN-US>loadlib</span><span
style='font-family:宋体'>的函数内提供了所有的动态连接的功能。这个函数有两个参数</span><span lang=EN-US>:</span><span
style='font-family:宋体'>库的绝对路径和初始化函数。所以典型的调用的例子如下：</span></p>

<div style='border:RGB(190,72,181) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,222,254)'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> path = <span
style='color:red'>&quot;/usr/local/lua/lib/libluasocket.so&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> f = loadlib(path, <span
style='color:red'>&quot;luaopen_socket&quot;</span>)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>loadlib</span><span
style='font-family:宋体'>函数加载指定的库并且连接到</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>，然而它并不打开库（也就是说没有调用初始化函数），反之他返回初始化函数作为</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的一个函数，这样我们就可以直接在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中调用他。如果加载动态库或者查找初始化函数时出错，</span><span
lang=EN-US>loadlib</span><span style='font-family:宋体'>将返回</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>和错误信息。我们可以修改前面一段代码，使其检测错误然后调用初始化函数：</span></p>

<div style='border:RGB(190,72,181) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(245,233,222);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> path = <span
style='color:red'>&quot;/usr/local/lua/lib/libluasocket.so&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,245,252)'><span
lang=EN-US style='color:green'>-- or path =
&quot;C:\\windows\\luasocket.dll&quot;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> f = assert(loadlib(path,
<span style='color:red'>&quot;luaopen_socket&quot;</span>))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,240,252)'><span
lang=EN-US>f()&nbsp; <span style='color:green'>-- actually open the library</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一般情况下我们期望二进制的发布库包含一个与前面代码段相似的</span><span
lang=EN-US>stub</span><span style='font-family:宋体'>文件，安装二进制库的时候可以随便放在某个目录，只需要修改</span><span
lang=EN-US>stub</span><span style='font-family:宋体'>文件对应二进制库的实际路径即可。将</span><span
lang=EN-US>stub</span><span style='font-family:宋体'>文件所在的目录加入到</span><span
lang=EN-US>LUA_PATH</span><span style='font-family:宋体'>，这样设定后就可以使用</span><span
lang=EN-US>require</span><span style='font-family:宋体'>函数加载</span><span
lang=EN-US>C</span><span style='font-family:宋体'>库了。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

