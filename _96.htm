<html>

<head>
  <title> 第16章 面向对象程序设计 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;第16章 面向对象程序设计</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>中的表不仅在某种意义上是一种对象。像对象一样，表也有状态（成员变量）；也有与对象的值独立的本性，特别是拥有两个不同值的对象（</span><span
lang=EN-US>table</span><span style='font-family:宋体'>）代表两个不同的对象；一个对象在不同的时候也可以有不同的值，但他始终是一个对象；与对象类似，表的生命周期与其由什么创建、在哪创建没有关系。对象有他们的成员函数，表也有：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,254,253)'><span
lang=EN-US>Account = {balance = 0}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> Account.withdraw
(v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,247,250)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; Account.balance = Account.balance - v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个定义创建了一个新的函数，并且保存在</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>对象的</span><span
lang=EN-US>withdraw</span><span style='font-family:宋体'>域内，下面我们可以这样调用：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(255,237,250);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>Account.withdraw(100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这种函数就是我们所谓的方法，然而，在一个函数内部使用全局变量名</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>是一个不好的习惯。首先，这个函数只能在这个特殊的对象（译者：指</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>）中使用；第二，即使对这个特殊的对象而言，这个函数也只有在对象被存储在特殊的变量（译者：指</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>）中才可以使用。如果我们改变了这个对象的名字，函数</span><span
lang=EN-US>withdraw</span><span style='font-family:宋体'>将不能工作：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(244,224,237);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>a = Account; Account = <span style='color:blue'>nil</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,247,251)'><span
lang=EN-US>a.withdraw(100.00)&nbsp;&nbsp; <span style='color:green'>-- ERROR!</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这种行为违背了前面的对象应该有独立的生命周期的原则。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>一个灵活的方法是：定义方法的时候带上一个额外的参数，来表示方法作用的对象。这个参数经常为</span><span
lang=EN-US>self</span><span style='font-family:宋体'>或者</span><span lang=EN-US>this</span><span
style='font-family:宋体'>：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,254,255)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> Account.withdraw
(self, v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; self.balance = self.balance - v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,241,254)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在，当我们调用这个方法的时候不需要指定他操作的对象了：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,239,234)'><span
lang=EN-US>a1 = Account; Account = <span style='color:blue'>nil</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>...</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,241,251)'><span
lang=EN-US>a1.withdraw(a1, 100.00)&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- OK</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用</span><span
lang=EN-US>self</span><span style='font-family:宋体'>参数定义函数后，我们可以将这个函数用于多个对象上：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,251,227)'><span
lang=EN-US>a2 = {balance=0, withdraw = Account.withdraw}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>...</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,237,246)'><span
lang=EN-US>a2.withdraw(a2, 260.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>self</span><span
style='font-family:宋体'>参数的使用是很多面向对象语言的要点。大多数</span><span lang=EN-US>OO</span><span
style='font-family:宋体'>语言将这种机制隐藏起来，这样程序员不必声明这个参数（虽然仍然可以在方法内使用这个参数）。</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>也提供了通过使用冒号操作符来隐藏这个参数的声明。我们可以重写上面的代码：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(231,253,235)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> Account:withdraw
(v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; self.balance = self.balance - v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,229,222)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>调用方法如下：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,252,251)'><span
lang=EN-US>a:withdraw(100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>冒号的效果相当于在函数定义和函数调用的时候，增加一个额外的隐藏参数。这种方式只是提供了一种方便的语法，实际上并没有什么新的内容。我们可以使用</span><span
lang=EN-US>dot</span><span style='font-family:宋体'>语法定义函数而用冒号语法调用函数，反之亦然，只要我们正确的处理好额外的参数：</span></p>

<div style='border:RGB(40,15,28) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,242,224)'><span
lang=EN-US>Account = {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; balance=0,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,236,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; withdraw = <span style='color:blue'>function</span>
(self, v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.balance = self.balance - v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,220,224)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,254,246)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> Account:deposit
(v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,222,238)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; self.balance = self.balance + v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,248,231)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>Account.deposit(Account, 200.00)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,243,226)'><span
lang=EN-US>Account:withdraw(100.00)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>现在我们的对象拥有一个标示符，一个状态和操作这个状态的方法。但他们依然缺少一个</span><span
lang=EN-US>class</span><span style='font-family:宋体'>系统，继承和隐藏。先解决第一个问题：我们如何才能创建拥有相似行为的多个对象呢？明确地说，我们怎样才能创建多个</span><span
lang=EN-US>accounts</span><span style='font-family:宋体'>？（译者：针对上面的对象</span><span
lang=EN-US>Account</span><span style='font-family:宋体'>而言）</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

