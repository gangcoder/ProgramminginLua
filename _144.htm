<html>

<head>
  <title>25.2 调用Lua函数 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;25.2 调用Lua函数</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>作为配置文件的一个最大的长处在于它可以定义个被应用调用的函数。比如，你可以写一个应用程序来绘制一个函数的图像，使用</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>来定义这个函数。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用</span><span
lang=EN-US>API</span><span style='font-family:宋体'>调用函数的方法是很简单的：首先，将被调用的函数入栈；第二，依次将所有参数入栈；第三，使用</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>调用函数；最后，从栈中获取函数执行返回的结果。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>看一个例子，假定我们的配置文件有下面这个函数：</span></p>

<div style='border:RGB(88,189,81) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,248,225)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> f (x, y)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> (x^2 *
math.sin(y))/(1 - x)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,248,254)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>并且我们想在</span><span
lang=EN-US>C</span><span style='font-family:宋体'>中对于给定的</span><span lang=EN-US>x,y</span><span
style='font-family:宋体'>计算</span><span lang=EN-US>z=f(x,y)</span><span
style='font-family:宋体'>的值。假如你已经打开了</span><span lang=EN-US>lua</span><span
style='font-family:宋体'>库并且运行了配置文件，你可以将这个调用封装成下面的</span><span lang=EN-US>C</span><span
style='font-family:宋体'>函数：</span></p>

<div style='border:RGB(88,189,81) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(234,249,224)'><span
lang=EN-US style='color:green'>/* call a function `f' defined in Lua */</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>double</span><span lang=EN-US> f (<span
style='color:blue'>double</span> x, <span style='color:blue'>double</span> y) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(222,232,252)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>double</span> z;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,250,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* push functions and
arguments */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_getglobal(L, <span style='color:red'>&quot;f&quot;</span>);&nbsp;&nbsp; <span
style='color:green'>/* function to be called */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(232,232,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_pushnumber(L, x);&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* push 1st argument */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_pushnumber(L, y);&nbsp;&nbsp;&nbsp; <span
style='color:green'>/* push 2nd argument */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,222,254)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* do the call (2
arguments, 1 result) */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,224,240)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span> (lua_pcall(L,
2, 1, 0) != 0)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;error running function `f': %s&quot;</span>,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,253,227)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_tostring(L,
-1));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,240,240)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* retrieve result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
(!lua_isnumber(L, -1))</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,231,229)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error(L, <span
style='color:red'>&quot;function `f' must return a number&quot;</span>);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; z = lua_tonumber(L, -1);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(255,234,255)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_pop(L, 1);&nbsp; <span style='color:green'>/*
pop returned value */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> z;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,252,244)'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>可以调用</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>时指定参数的个数和返回结果的个数。第四个参数可以指定一个错误处理函数，我们下面再讨论它。和</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中赋值操作一样，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>会根据你的要求调整返回结果的个数，多余的丢弃，少的用</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>补足。在将结果入栈之前，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>会将栈内的函数和参数移除。如果函数返回多个结果，第一个结果被第一个入栈，因此如果有</span><span
lang=EN-US>n</span><span style='font-family:宋体'>个返回结果，第一个返回结果在栈中的位置为</span><span
lang=EN-US>-n</span><span style='font-family:宋体'>，最后一个返回结果在栈中的位置为</span><span
lang=EN-US>-1</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>如果</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>运行时出现错误，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>会返回一个非</span><span
lang=EN-US>0</span><span style='font-family:宋体'>的结果。另外，他将错误信息入栈（仍然会先将函数和参数从栈中移除）。在将错误信息入栈之前，如果指定了错误处理函数，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>毁掉用错误处理函数。使用</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>的最后一个参数来指定错误处理函数，</span><span
lang=EN-US>0</span><span style='font-family:宋体'>代表没有错误处理函数，也就是说最终的错误信息就是原始的错误信息。否则，那个参数应该是一个错误函数被加载的时候在栈中的索引，注意，在这种情况下，错误处理函数必须要在被调用函数和其参数入栈之前入栈。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>对于一般错误，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>返回错误代码</span><span
lang=EN-US>LUA_ERRRUN</span><span style='font-family:宋体'>。有两种特殊情况，会返回特殊的错误代码，因为他们从来不会调用错误处理函数。第一种情况是，内存分配错误，对于这种错误，</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>总是返回</span><span
lang=EN-US>LUA_ERRMEM</span><span style='font-family:宋体'>。第二种情况是，当</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>正在运行错误处理函数时发生错误，这种情况下，再次调用错误处理函数没有意义，所以</span><span
lang=EN-US>lua_pcall</span><span style='font-family:宋体'>立即返回错误代码</span><span
lang=EN-US>LUA_ERRERR</span><span style='font-family:宋体'>。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

