<html>

<head>
  <title>16.5 Single-Method的对象实现方法 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;16.5 Single-Method的对象实现方法</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>前面的</span><span
lang=EN-US>OO</span><span style='font-family:宋体'>程序设计的方法有一种特殊情况：对象只有一个单一的方法。这种情况下，我们不需要创建一个接口表，取而代之的是，我们将这个单一的方法作为对象返回。这听起来有些不可思议，如果需要可以复习一下</span><span
lang=EN-US>7.1</span><span style='font-family:宋体'>节，那里我们介绍了如何构造迭代子函数来保存闭包的状态。其实，一个保存状态的迭代子函数就是一个</span><span
lang=EN-US>single-method</span><span style='font-family:宋体'>对象。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>关于</span><span
lang=EN-US>single-method</span><span style='font-family:宋体'>的对象一个有趣的情况是：当这个</span><span
lang=EN-US>single-method</span><span style='font-family:宋体'>实际是一个基于重要的参数而执行不同的任务的分派（</span><span
lang=EN-US>dispatch</span><span style='font-family:宋体'>）方法时。针对这种对象：</span></p>

<div style='border:RGB(191,235,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,243,231)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> newObject
(value)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> <span
style='color:blue'>function</span> (action, v)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,252,247)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
action == <span style='color:red'>&quot;get&quot;</span> <span
style='color:blue'>then</span> <span style='color:blue'>return</span> value</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>elseif</span>
action == <span style='color:red'>&quot;set&quot;</span> <span
style='color:blue'>then</span> value = v</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(253,238,234)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>else</span>
error(<span style='color:red'>&quot;invalid action&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,251,222)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用起来很简单：</span></p>

<div style='border:RGB(191,235,83) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(231,252,246);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>d = newObject(0)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,255,233)'><span
lang=EN-US>print(d(<span style='color:red'>&quot;get&quot;</span>))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 0</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>d(<span style='color:red'>&quot;set&quot;</span>, 10)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,242,230)'><span
lang=EN-US>print(d(<span style='color:red'>&quot;get&quot;</span>))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>--&gt; 10</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这种非传统的对象实现是非常有效的，语法</span><span
lang=EN-US>d(&quot;set&quot;,10)</span><span style='font-family:宋体'>虽然很罕见，但也只不过比传统的</span><span
lang=EN-US>d:set(10)</span><span style='font-family:宋体'>长两个字符而已。每一个对象是用一个单独的闭包，代价比起表来小的多。这种方式没有继承但有私有性：访问对象状态的唯一方式是通过它的内部方法。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Tcl/Tk </span><span
style='font-family:宋体'>的窗口部件（</span><span lang=EN-US>widgets</span><span
style='font-family:宋体'>）使用了相似的方法，在</span><span lang=EN-US>Tk</span><span
style='font-family:宋体'>中一个窗口部件的名字表示一个在窗口部件上执行各种可能操作的函数（</span><span lang=EN-US>a
widget command</span><span style='font-family:宋体'>）。</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section25 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

