<html>

<head>
  <title>11.6 字符串缓冲 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;11.6 字符串缓冲</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>假定你要拼接很多个小的字符串为一个大的字符串，比如，从一个文件中逐行读入字符串。你可能写出下面这样的代码：</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(248,252,226)'><span
lang=EN-US style='color:green'>-- WARNING: bad code ahead!!</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> buff = <span
style='color:red'>&quot;&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,239,239)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> line <span
style='color:blue'>in</span> io.lines() <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; buff = buff .. line .. <span style='color:red'>&quot;\n&quot;</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,243,251)'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>尽管这段代码看上去很正常，但在</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中他的效率极低，在处理大文件的时候，你会明显看到很慢，例如，需要花大概</span><span
lang=EN-US>1</span><span style='font-family:宋体'>分钟读取</span><span lang=EN-US>350KB</span><span
style='font-family:宋体'>的文件。（这就是为什么</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>专门提供了</span><span lang=EN-US>io.read(*all)</span><span
style='font-family:宋体'>选项，她读取同样的文件只需要</span><span lang=EN-US>0.02s</span><span
style='font-family:宋体'>）</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>为什么这样呢？</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>使用真正的垃圾收集算法，但他发现程序使用太多的内存他就会遍历他所有的数据结构去释放垃圾数据，一般情况下，这个算法有很好的性能（</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的快并非偶然的），但是上面那段代码</span><span
lang=EN-US>loop</span><span style='font-family:宋体'>使得算法的效率极其低下。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>为了理解现象的本质，假定我们身在</span><span
lang=EN-US>loop</span><span style='font-family:宋体'>中间，</span><span lang=EN-US>buff</span><span
style='font-family:宋体'>已经是一个</span><span lang=EN-US>50KB</span><span
style='font-family:宋体'>的字符串，每一行的大小为</span><span lang=EN-US>20bytes</span><span
style='font-family:宋体'>，当</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>执行</span><span lang=EN-US>buff..line..&quot;\n&quot;</span><span
style='font-family:宋体'>时，她创建了一个新的字符串大小为</span><span lang=EN-US>50,020 bytes</span><span
style='font-family:宋体'>，并且从</span><span lang=EN-US>buff</span><span
style='font-family:宋体'>中将</span><span lang=EN-US>50KB</span><span
style='font-family:宋体'>的字符串拷贝到新串中。也就是说，对于每一行，都要移动</span><span lang=EN-US>50KB</span><span
style='font-family:宋体'>的内存，并且越来越多。读取</span><span lang=EN-US>100</span><span
style='font-family:宋体'>行的时候（仅仅</span><span lang=EN-US>2KB</span><span
style='font-family:宋体'>），</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>已经移动了</span><span lang=EN-US>5MB</span><span
style='font-family:宋体'>的内存，使情况变遭的是下面的赋值语句：</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,240,238)'><span
lang=EN-US>buff = buff .. line .. <span style='color:red'>&quot;\n&quot;</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>老的字符串变成了垃圾数据，两轮循环之后，将有两个老串包含超过</span><span
lang=EN-US>100KB</span><span style='font-family:宋体'>的垃圾数据。这个时候</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>会做出正确的决定，进行他的垃圾收集并释放</span><span
lang=EN-US>100KB</span><span style='font-family:宋体'>的内存。问题在于每两次循环</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>就要进行一次垃圾收集，读取整个文件需要进行</span><span
lang=EN-US>200</span><span style='font-family:宋体'>次垃圾收集。并且它的内存使用是整个文件大小的三倍。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个问题并不是</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>特有的：其它的采用垃圾收集算法的并且字符串不可变的语言也都存在这个问题。</span><span
lang=EN-US>Java</span><span style='font-family:宋体'>是最著名的例子，</span><span
lang=EN-US>Java</span><span style='font-family:宋体'>专门提供</span><span lang=EN-US>StringBuffer</span><span
style='font-family:宋体'>来改善这种情况。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在继续进行之前，我们应该做个注释的是，在一般情况下，这个问题并不存在。对于小字符串，上面的那个循环没有任何问题。为了读取整个文件我们可以使用</span><span
lang=EN-US>io.read(*all)</span><span style='font-family:宋体'>，可以很快的将这个文件读入内存。但是在某些时候，没有解决问题的简单的办法，所以下面我们将介绍更加高效的算法来解决这个问题。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>我们最初的算法通过将循环每一行的字符串连接到老串上来解决问题，新的算法避免如此：它连接两个小串成为一个稍微大的串，然后连接稍微大的串成更大的串。。。算法的核心是：用一个栈，在栈的底部用来保存已经生成的大的字符串，而小的串从栈定入栈。栈的状态变化和经典的汉诺塔问题类似：位于栈下面的串肯定比上面的长，只要一个较长的串入栈后比它下面的串长，就将两个串合并成一个新的更大的串，新生成的串继续与相邻的串比较如果长于底部的将继续进行合并，循环进行到没有串可以合并或者到达栈底。</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,229,233)'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> newStack ()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> {<span
style='color:red'>&quot;&quot;</span>}&nbsp;&nbsp; <span style='color:green'>--
starts with an empty string</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,247,239)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(235,252,229)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>function</span><span lang=EN-US> addString
(stack, s)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(222,243,225)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; table.insert(stack, s)&nbsp;&nbsp; <span
style='color:green'>-- push 's' into the the stack</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>for</span>
i=table.getn(stack)-1, 1, -1 <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,226,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>if</span>
string.len(stack[i]) &gt; string.len(stack[i+1]) <span style='color:blue'>then</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>break</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(246,251,245)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stack[i] = stack[i] ..
table.remove(stack)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,227,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>end</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>要想获取最终的字符串，我们只需要从上向下一次合并所有的字符串即可。</span><span
lang=EN-US>table.concat</span><span style='font-family:宋体'>函数可以将一个列表的所有串合并。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用这个新的数据结构，我们重写我们的代码：</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(221,242,244);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> s = newStack()</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(244,254,230)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> line <span
style='color:blue'>in</span> io.lines() <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; addString(s, line .. <span style='color:red'>&quot;\n&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,247,250)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>s = toString(s)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>最终的程序读取</span><span
lang=EN-US>350KB</span><span style='font-family:宋体'>的文件只需要</span><span
lang=EN-US>0.5s</span><span style='font-family:宋体'>，当然调用</span><span
lang=EN-US>io.read(&quot;*all&quot;)</span><span style='font-family:宋体'>仍然是最快的只需要</span><span
lang=EN-US>0.02s</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>实际上，我们调用</span><span
lang=EN-US>io.read(&quot;*all&quot;)</span><span style='font-family:宋体'>的时候，</span><span
lang=EN-US>io.read</span><span style='font-family:宋体'>就是使用我们上面的数据结构，只不过是用</span><span
lang=EN-US>C</span><span style='font-family:宋体'>实现的，在</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>标准库中，有些其他函数也是用</span><span lang=EN-US>C</span><span
style='font-family:宋体'>实现的，比如</span><span lang=EN-US>table.concat</span><span
style='font-family:宋体'>，使用</span><span lang=EN-US>table.concat</span><span
style='font-family:宋体'>我们可以很容易的将一个</span><span lang=EN-US>table</span><span
style='font-family:宋体'>的中的字符串连接起来，因为它使用</span><span lang=EN-US>C</span><span
style='font-family:宋体'>实现的，所以即使字符串很大它处理起来速度还是很快的。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Concat</span><span
style='font-family:宋体'>接受第二个可选的参数，代表插入的字符串之间的分隔符。通过使用这个参数，我们不需要在每一行之后插入一个新行：</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(236,239,235);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>local</span><span lang=EN-US> t = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(238,225,241)'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> line <span
style='color:blue'>in</span> io.lines() <span style='color:blue'>do</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; table.insert(t, line)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,232,248)'><span
lang=EN-US style='color:blue'>end</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>s = table.concat(t, <span style='color:red'>&quot;\n&quot;</span>)
.. <span style='color:red'>&quot;\n&quot;</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>io.lines</span><span
style='font-family:宋体'>迭代子返回不带换行符的一行，</span><span lang=EN-US>concat</span><span
style='font-family:宋体'>在字符串之间插入分隔符，但是最后一字符串之后不会插入分隔符，因此我们需要在最后加上一个分隔符。最后一个连接操作复制了整个字符串，这个时候整个字符串可能是很大的。我们可以使用一点小技巧，插入一个空串：</span></p>

<div style='border:RGB(36,51,176) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(221,250,226);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>table.insert(t, <span style='color:red'>&quot;&quot;</span>)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(233,236,239)'><span
lang=EN-US>s = table.concat(t, <span style='color:red'>&quot;\n&quot;</span>)</span></p>

</div>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:0cm'><span lang=EN-US>&nbsp;</span></p>

</div>

<span lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'><br
clear=all style='page-break-before:always'>
</span>

<div class=Section20 style='layout-grid:15.6pt 0pt'>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

