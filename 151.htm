<html>

<head>
  <title>27.2 字符串处理 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;27.2 字符串处理</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当</span><span
lang=EN-US>C</span><span style='font-family:宋体'>函数接受一个来自</span><span
lang=EN-US>lua</span><span style='font-family:宋体'>的字符串作为参数时，有两个规则必须遵守：当字符串正在被访问的时候不要将其出栈；永远不要修改字符串。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当</span><span
lang=EN-US>C</span><span style='font-family:宋体'>函数需要创建一个字符串返回给</span><span
lang=EN-US>lua</span><span style='font-family:宋体'>的时候，情况变得更加复杂。这样需要由</span><span
lang=EN-US>C</span><span style='font-family:宋体'>代码来负责缓冲区的分配和释放，负责处理缓冲溢出等情况。然而，</span><span
lang=EN-US>Lua API</span><span style='font-family:宋体'>提供了一些函数来帮助我们处理这些问题。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>标准</span><span
lang=EN-US>API</span><span style='font-family:宋体'>提供了对两种基本字符串操作的支持：子串截取和字符串连接。记住，</span><span
lang=EN-US>lua_pushlstring</span><span style='font-family:宋体'>可以接受一个额外的参数，字符串的长度来实现字符串的截取，所以，如果你想将字符串</span><span
lang=EN-US>s</span><span style='font-family:宋体'>从</span><span lang=EN-US>i</span><span
style='font-family:宋体'>到</span><span lang=EN-US>j</span><span style='font-family:
宋体'>位置（包含</span><span lang=EN-US>i</span><span style='font-family:宋体'>和</span><span
lang=EN-US>j</span><span style='font-family:宋体'>）的子串传递给</span><span lang=EN-US>lua</span><span
style='font-family:宋体'>，只需要：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,225,226)'><span
lang=EN-US>lua_pushlstring(L, s+i, j-i+1);</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>下面这个例子，假如你想写一个函数来根据指定的分隔符分割一个字符串，并返回一个保存所有子串的</span><span
lang=EN-US>table</span><span style='font-family:宋体'>，比如调用：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(236,255,250)'><span
lang=EN-US>split(<span style='color:red'>&quot;hi,,there&quot;</span>, <span
style='color:red'>&quot;,&quot;</span>)</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>应该返回表</span><span
lang=EN-US>{&quot;hi&quot;, &quot;&quot;, &quot;there&quot;}</span><span
style='font-family:宋体'>。我们可以简单的实现如下，下面这个函数不需要额外的缓冲区，可以处理字符串的长度也没有限制。</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,232,232)'><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> <span
style='color:blue'>int</span> l_split (lua_State *L) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>const</span> <span
style='color:blue'>char</span> *s = luaL_checkstring(L, 1);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(249,250,246)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>const</span> <span
style='color:blue'>char</span> *sep = luaL_checkstring(L, 2);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>const</span> <span
style='color:blue'>char</span> *e;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,252,239)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>int</span> i = 1;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,228,235)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_newtable(L);&nbsp; <span style='color:green'>/*
result */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,252,243)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* repeat for each
separator */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>while</span> ((e =
strchr(s, *sep)) != NULL) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(230,254,233)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_pushlstring(L, s,
e-s);&nbsp; <span style='color:green'>/* push substring */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lua_rawseti(L, -2, i++);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(252,247,225)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = e + 1;&nbsp; <span
style='color:green'>/* skip separator */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(245,225,247)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:green'>/* push last substring
*/</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(247,239,224)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_pushstring(L, s);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; lua_rawseti(L, -2, i);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(240,230,253)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> 1;&nbsp; <span
style='color:green'>/* return the table */</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,222,244)'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在</span><span
lang=EN-US>Lua API</span><span style='font-family:宋体'>中提供了专门的用来连接字符串的函数</span><span
lang=EN-US>lua_concat</span><span style='font-family:宋体'>。等价于</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>中的</span><span lang=EN-US>..</span><span
style='font-family:宋体'>操作符：自动将数字转换成字符串，如果有必要的时候还会自动调用</span><span lang=EN-US>metamethods</span><span
style='font-family:宋体'>。另外，她可以同时连接多个字符串。调用</span><span lang=EN-US>lua_concat(L,n)</span><span
style='font-family:宋体'>将连接</span><span lang=EN-US>(</span><span
style='font-family:宋体'>同时会出栈</span><span lang=EN-US>)</span><span
style='font-family:宋体'>栈顶的</span><span lang=EN-US>n</span><span
style='font-family:宋体'>个值，并将最终结果放到栈顶。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>另一个有用的函数是</span><span
lang=EN-US>lua_pushfstring</span><span style='font-family:宋体'>：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(237,243,240)'><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> <span
style='color:blue'>char</span> *lua_pushfstring (lua_State *L,</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:blue'>const</span> <span style='color:blue'>char</span> *fmt,
...);</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>这个函数某种程度上类似于</span><span
lang=EN-US>C</span><span style='font-family:宋体'>语言中的</span><span lang=EN-US>sprintf</span><span
style='font-family:宋体'>，根据格式串</span><span lang=EN-US>fmt</span><span
style='font-family:宋体'>的要求创建一个新的字符串。与</span><span lang=EN-US>sprintf</span><span
style='font-family:宋体'>不同的是，你不需要提供一个字符串缓冲数组，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>为你动态的创建新的字符串，按他实际需要的大小。也不需要担心缓冲区溢出等问题。这个函数会将结果字符串放到栈内，并返回一个指向这个结果串的指针。当前，这个函数只支持下列几个指示符：</span><span
lang=EN-US> %%</span><span style='font-family:宋体'>（表示字符</span><span lang=EN-US>
'%'</span><span style='font-family:宋体'>）、</span><span lang=EN-US>%s</span><span
style='font-family:宋体'>（用来格式化字符串）、</span><span lang=EN-US>%d</span><span
style='font-family:宋体'>（格式化整数）、</span><span lang=EN-US>%f</span><span
style='font-family:宋体'>（格式化</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>数字，即</span><span lang=EN-US> doubles</span><span
style='font-family:宋体'>）和</span><span lang=EN-US> %c</span><span
style='font-family:宋体'>（接受一个数字并将其作为字符），不支持宽度和精度等选项。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当我们打算连接少量的字符串的时候，</span><span
lang=EN-US>lua_concat</span><span style='font-family:宋体'>和</span><span
lang=EN-US>lua_pushfstring</span><span style='font-family:宋体'>是很有用的，然而，如果我们需要连接大量的字符串（或者字符），这种一个一个的连接方式效率是很低的，正如我们在</span><span
lang=EN-US>11.6</span><span style='font-family:宋体'>节看到的那样。我们可以使用辅助库提供的</span><span
lang=EN-US>buffer</span><span style='font-family:宋体'>相关函数来解决这个问题。</span><span
lang=EN-US>Auxlib</span><span style='font-family:宋体'>在两个层次上实现了这些</span><span
lang=EN-US>buffer</span><span style='font-family:宋体'>。第一个层次类似于</span><span
lang=EN-US>I/O</span><span style='font-family:宋体'>操作的</span><span lang=EN-US>buffers</span><span
style='font-family:宋体'>：集中所有的字符串（或者但个字符）放到一个本地</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>中，当本地</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>满的时候将其传递给</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>（使用</span><span lang=EN-US>lua_pushlstring</span><span
style='font-family:宋体'>）。第二个层次使用</span><span lang=EN-US>lua_concat</span><span
style='font-family:宋体'>和我们在</span><span lang=EN-US>11.6</span><span
style='font-family:宋体'>节中看到的那个栈算法的变体，来连接多个</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的结果。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>为了更详细地描述</span><span
lang=EN-US>Auxlib</span><span style='font-family:宋体'>中的</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的使用，我们来看一个简单的应用。下面这段代码显示了</span><span lang=EN-US>string.upper</span><span
style='font-family:宋体'>的实现（来自文件</span><span lang=EN-US>lstrlib.c</span><span
style='font-family:宋体'>）：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(235,230,225);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>static</span><span lang=EN-US> <span
style='color:blue'>int</span> str_upper (lua_State *L) {</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(254,236,254)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; size_t l;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; size_t i;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(228,239,230)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaL_Buffer b;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>const</span> <span
style='color:blue'>char</span> *s = luaL_checklstr(L, 1, &amp;l);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,225,226)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaL_buffinit(L, &amp;b);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>for</span> (i=0; i&lt;l;
i++)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(251,244,242)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; luaL_putchar(&amp;b, toupper((<span
style='color:blue'>unsigned</span> <span style='color:blue'>char</span>)(s[i])));</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; luaL_pushresult(&amp;b);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(227,243,236)'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; <span style='color:blue'>return</span> 1;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>}</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用</span><span
lang=EN-US>Auxlib</span><span style='font-family:宋体'>中</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的第一步是使用类型</span><span lang=EN-US>luaL_Buffer</span><span
style='font-family:宋体'>声明一个变量，然后调用</span><span lang=EN-US>luaL_buffinit</span><span
style='font-family:宋体'>初始化这个变量。初始化之后，</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>保留了一份状态</span><span lang=EN-US>L</span><span
style='font-family:宋体'>的拷贝，因此当我们调用其他操作</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的函数的时候不需要传递</span><span lang=EN-US>L</span><span
style='font-family:宋体'>。宏</span><span lang=EN-US>luaL_putchar</span><span
style='font-family:宋体'>将一个单个字符放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>。</span><span lang=EN-US>Auxlib</span><span
style='font-family:宋体'>也提供了</span><span lang=EN-US>luaL_addlstring</span><span
style='font-family:宋体'>以一个显示的长度将一个字符串放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>，而</span><span lang=EN-US>luaL_addstring</span><span
style='font-family:宋体'>将一个以</span><span lang=EN-US>0</span><span
style='font-family:宋体'>结尾的字符串放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>。最后，</span><span lang=EN-US>luaL_pushresult</span><span
style='font-family:宋体'>刷新</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>并将最终字符串放到栈顶。这些函数的原型如下：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(250,237,242);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> luaL_buffinit
(lua_State *L, luaL_Buffer *B);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(236,240,232)'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> luaL_putchar
(luaL_Buffer *B, <span style='color:blue'>char</span> c);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void </span><span lang=EN-US>luaL_addlstring
(luaL_Buffer *B, <span style='color:blue'>const</span> <span style='color:blue'>char</span>
*s, size_t l);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(229,247,255)'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> luaL_addstring
(luaL_Buffer *B, <span style='color:blue'>const</span> <span style='color:blue'>char</span>
*s);</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> luaL_pushresult
(luaL_Buffer *B);</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>使用这些函数，我们不需要担心</span><span
lang=EN-US>buffer</span><span style='font-family:宋体'>的分配，溢出等详细信息。正如我们所看到的，连接算法是有效的。函数</span><span
lang=EN-US>str_upper</span><span style='font-family:宋体'>可以毫无问题的处理大字符串（大于</span><span
lang=EN-US>1MB</span><span style='font-family:宋体'>）。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当你使用</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>中的</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>时，不必担心一点细节问题。你只要将东西放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>，程序会自动在</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>栈中保存中间结果。所以，你不要认为栈顶会保持你开始使用</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的那个状态。另外，虽然你可以在使用</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的时候，将栈用作其他用途，但每次你访问</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>的时候，这些其他用途的操作进行的</span><span lang=EN-US>push/pop</span><span
style='font-family:宋体'>操作必须保持平衡</span><a href="#_ftn8" name="_ftnref8" title=""><span
class=MsoFootnoteReference><span lang=EN-US><span class=MsoFootnoteReference><span
lang=EN-US style='font-size:10.5pt;font-family:"Times New Roman","serif"'>[8]</span></span></span></span></a><span
style='font-family:宋体'>。有一种情况，即你打算将从</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>返回的字符串放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>时，这种情况下，这些限制有些过于严格。这种情况下，在将字符串放入</span><span lang=EN-US>buffer</span><span
style='font-family:宋体'>之前，不能将字符串出栈，因为一旦你从栈中将来自于</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>的字符串移出，你就永远不能使用这个字符串。同时，在将一个字符串出栈之前，你也不能够将其放入</span><span
lang=EN-US>buffer</span><span style='font-family:宋体'>，因为那样会将栈置于错误的层次（</span><span
lang=EN-US>because then the stack would be in the wrong level</span><span
style='font-family:宋体'>）。换句话说你不能做类似下面的事情：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(243,238,255);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>luaL_addstring(&amp;b, lua_tostring(L, 1));&nbsp;&nbsp; <span
style='color:green'>/* BAD CODE */</span></span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>（译者：上面正好构成了一对矛盾），由于这种情况是很常见的，</span><span
lang=EN-US>auxlib</span><span style='font-family:宋体'>提供了特殊的函数来将位于栈顶的值放入</span><span
lang=EN-US>buffer</span><span style='font-family:宋体'>：</span></p>

<div style='border:RGB(101,198,255) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:RGB(249,245,251);margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US> luaL_addvalue (luaL_Buffer
*B);</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>当然，如果位于栈顶的值不是字符串或者数字的话，调用这个函数将会出错。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href=3.htm>lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

