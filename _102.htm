<html>

<head>
  <title> 第17章 Weak表 - Lua程序设计</title>
  <meta http-equiv=Content-Type content="text/html; charset=UTF-8">
  <meta name="GENERATOR" content="Macrobject Word-2-CHM">
  <link rel="stylesheet" href="Word2Chm.css" type="text/css">
  <link rel="stylesheet" href="default.css" type="text/css" />
</head>

<body lang=ZH-CN link=blue vlink=purple style='text-justify-trim:punctuation'>
  <table width="100%" cellpadding="0" cellspacing="0" border="0">
    <tr>
      <td class="moHeader">&nbsp;第17章 Weak表</td>
    </tr>
  </table>
  
  <p></p>

<div class=Section1 style='layout-grid:15.6pt'>



<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Lua</span><span
style='font-family:宋体'>自动进行内存的管理。程序只能创建对象（表，函数等），而没有执行删除对象的函数。通过使用垃圾收集技术，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>会自动删除那些失效的对象。这可以使你从内存管理的负担中解脱出来。更重要的，可以让你从那些由此引发的大部分</span><span
lang=EN-US>BUG</span><span style='font-family:宋体'>中解脱出来，比如指针挂起（</span><span
lang=EN-US>dangling pointers</span><span style='font-family:宋体'>）和内存溢出。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>和其他的不同，</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>的垃圾收集器不存在循环的问题。在使用循环性的数据结构的时候，你无须加入特殊的操作；他们会像其他数据一样被收集。当然，有些时候即使更智能化的收集器也需要你的帮助。没有任何的垃圾收集器可以让你忽略掉内存管理的所有问题。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>垃圾收集器只能在确认对象失效之后才会进行收集；它是不会知道你对垃圾的定义的。一个典型的例子就是堆栈：有一个数组和指向栈顶的索引构成。你知道这个数组中有效的只是在顶端的那一部分，但</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>不那么认为。如果你通过简单的出栈操作提取一个数组元素，那么数组对象的其他部分对</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>来说仍然是有效的。同样的，任何在全局变量中声明的对象，都不是</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>认为的垃圾，即使你的程序中根本没有用到他们。这两种情况下，你应当自己处理它（你的程序），为这种对象赋</span><span
lang=EN-US>nil</span><span style='font-family:宋体'>值，防止他们锁住其他的空闲对象。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>然而，简单的清理你的声明并不总是足够的。有些语句需要你和收集器进行额外的合作。一个典型的例子发生在当你想在你的程序中对活动的对象（比如文件）进行收集的时候。那看起来是个简单的任务：你需要做的是在收集器中插入每一个新的对象。然而，一旦对象被插入了收集器，它就不会再被收集！即使没有其他的指针指向它，收集器也不会做什么的。</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>会认为这个引用是为了阻止对象被回收的，除非你告诉</span><span
lang=EN-US>Lua</span><span style='font-family:宋体'>怎么做。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span lang=EN-US>Weak</span><span
style='font-family:宋体'>表是一种用来告诉</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>一个引用不应该防止对象被回收的机制。一个</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>引用是指一个不被</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>认为是垃圾的对象的引用。如果一个对象所有的引用指向都是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>，对象将被收集，而那些</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>引用将会被删除。</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>通过</span><span lang=EN-US>weak tables</span><span
style='font-family:宋体'>来实现</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>引用：一个</span><span lang=EN-US>weak tables</span><span
style='font-family:宋体'>是指所有引用都是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>的</span><span lang=EN-US>table</span><span
style='font-family:宋体'>。这意味着，如果一个对象只存在于</span><span lang=EN-US>weak tables</span><span
style='font-family:宋体'>中，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>将会最终将它收集。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>表有</span><span
lang=EN-US>keys</span><span style='font-family:宋体'>和</span><span lang=EN-US>values</span><span
style='font-family:宋体'>，而这两者都可能包含任何类型的对象。在一般情况下，垃圾收集器并不会收集作为</span><span
lang=EN-US>keys</span><span style='font-family:宋体'>和</span><span lang=EN-US>values</span><span
style='font-family:宋体'>属性的对象。也就是说，</span><span lang=EN-US>keys</span><span
style='font-family:宋体'>和</span><span lang=EN-US>values</span><span
style='font-family:宋体'>都属于强引用，他们可以防止他们指向的对象被回收。在一个</span><span lang=EN-US>weak
tables</span><span style='font-family:宋体'>中，</span><span lang=EN-US>keys</span><span
style='font-family:宋体'>和</span><span lang=EN-US>vaules</span><span
style='font-family:宋体'>也可能是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>的。那意味着这里存在三种类型的</span><span lang=EN-US>weak tables</span><span
style='font-family:宋体'>：</span><span lang=EN-US>weak keys</span><span
style='font-family:宋体'>组成的</span><span lang=EN-US>tables</span><span
style='font-family:宋体'>；</span><span lang=EN-US>weak values</span><span
style='font-family:宋体'>组成的</span><span lang=EN-US>tables</span><span
style='font-family:宋体'>；以及纯</span><span lang=EN-US>weak tables</span><span
style='font-family:宋体'>类型，他们的</span><span lang=EN-US>keys</span><span
style='font-family:宋体'>和</span><span lang=EN-US>values</span><span
style='font-family:宋体'>都是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>的。与</span><span lang=EN-US>table</span><span
style='font-family:宋体'>本身的类型无关，当一个</span><span lang=EN-US>keys</span><span
style='font-family:宋体'>或者</span><span lang=EN-US>vaule</span><span
style='font-family:宋体'>被收集时，整个的入口（</span><span lang=EN-US>entry</span><span
style='font-family:宋体'>）都将从这个</span><span lang=EN-US>table</span><span
style='font-family:宋体'>中消失。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>表的</span><span
lang=EN-US>weak</span><span style='font-family:宋体'>性由他的</span><span lang=EN-US>metatable</span><span
style='font-family:宋体'>的</span><span lang=EN-US>__mode</span><span
style='font-family:宋体'>域来指定的。在这个域存在的时候，必须是个字符串：如果这个字符串包含小写字母‘</span><span
lang=EN-US>k</span><span style='font-family:宋体'>’，这个</span><span lang=EN-US>table</span><span
style='font-family:宋体'>中的</span><span lang=EN-US>keys</span><span
style='font-family:宋体'>就是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>的；如果这个字符串包含小写字母‘</span><span lang=EN-US>v</span><span
style='font-family:宋体'>’，这个</span><span lang=EN-US>table</span><span
style='font-family:宋体'>中的</span><span lang=EN-US>vaules</span><span
style='font-family:宋体'>就是</span><span lang=EN-US>weak</span><span
style='font-family:宋体'>的。下面是一个例子，虽然是人造的，但是可以阐明</span><span lang=EN-US>weak
tables</span><span style='font-family:宋体'>的基本应用：</span></p>

<div style='border:RGB(230,9,147) dashed 1px;padding:1.0pt 4.0pt 1.0pt 4.0pt;
background:#fff;margin-left:21.0pt;margin-right:21.0pt'>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(239,254,226)'><span
lang=EN-US>a = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>b = {}</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,242,238)'><span
lang=EN-US>setmetatable(a, b)</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>b.__mode = \&quot;k\&quot;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- now 'a' has weak keys</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(242,253,249)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>key = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- creates first key</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(221,235,229)'><span
lang=EN-US>a[key] = 1</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(220,238,228)'><span
lang=EN-US>key = {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
style='color:green'>-- creates second key</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>a[key] = 2</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(250,239,233)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US>collectgarbage()&nbsp;&nbsp;&nbsp;&nbsp; <span style='color:green'>--
forces a garbage collection cycle</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(223,251,229)'><span
lang=EN-US>&nbsp;</span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:#fff'><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US> k, v <span
style='color:blue'>in</span> pairs(a) <span style='color:blue'>do</span>
print(v) <span style='color:blue'>end</span></span></p>

<p class=AltD style='margin:0cm;margin-bottom:.0001pt;background:RGB(241,241,222)'><span
lang=EN-US style='color:green'>--&gt; 2</span></p>

</div>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>在这个例子中，第二个赋值语句</span><span
lang=EN-US>key={}</span><span style='font-family:宋体'>覆盖了第一个</span><span
lang=EN-US>key</span><span style='font-family:宋体'>的值。当垃圾收集器工作时，在其他地方没有指向第一个</span><span
lang=EN-US>key</span><span style='font-family:宋体'>的引用，所以它被收集了，因此相对应的</span><span
lang=EN-US>table</span><span style='font-family:宋体'>中的入口也同时被移除了。可是，第二个</span><span
lang=EN-US>key</span><span style='font-family:宋体'>，仍然是占用活动的变量</span><span
lang=EN-US>key</span><span style='font-family:宋体'>，所以它不会被收集。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>要注意，只有对象才可以从一个</span><span
lang=EN-US>weak table</span><span style='font-family:宋体'>中被收集。比如数字和布尔值类型的值，都是不会被收集的。例如，如果我们在</span><span
lang=EN-US>table</span><span style='font-family:宋体'>中插入了一个数值型的</span><span
lang=EN-US>key</span><span style='font-family:宋体'>（在前面那个例子中），它将永远不会被收集器从</span><span
lang=EN-US>table</span><span style='font-family:宋体'>中移除。当然，如果对应于这个数值型</span><span
lang=EN-US>key</span><span style='font-family:宋体'>的</span><span lang=EN-US>vaule</span><span
style='font-family:宋体'>被收集，那么它的整个入口将会从</span><span lang=EN-US>weak table</span><span
style='font-family:宋体'>中被移除。</span></p>

<p class=MsoNormal style='text-indent:21.0pt'><span style='font-family:宋体'>关于字符串的一些细微差别：从上面的实现来看，尽管字符串是可以被收集的，他们仍然跟其他可收集对象有所区别。</span>
<span style='font-family:宋体'>其他对象，比如</span><span lang=EN-US>tables</span><span
style='font-family:宋体'>和函数，他们都是显示的被创建。比如，不管什么时候当</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>遇到</span><span lang=EN-US>{}</span><span
style='font-family:宋体'>时，它建立了一个新的</span><span lang=EN-US>table</span><span
style='font-family:宋体'>。任何时候这个</span><span lang=EN-US> function</span><span
style='font-family:宋体'>（）。。。</span><span lang=EN-US>end</span><span
style='font-family:宋体'>建立了一个新的函数（实际上是一个闭包）。然而，</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>见到“</span><span lang=EN-US>a</span><span
style='font-family:宋体'>”</span><span lang=EN-US>..</span><span
style='font-family:宋体'>“</span><span lang=EN-US>b</span><span style='font-family:
宋体'>”的时候会创建一个新的字符串？如果系统中已经有一个字符串“</span><span lang=EN-US>ab</span><span
style='font-family:宋体'>”的话怎么办？</span><span lang=EN-US>Lua</span><span
style='font-family:宋体'>会重新建立一个新的？编译器可以在程序运行之前创建字符串么？这无关紧要：这些是实现的细节。因此，从程序员的角度来看，字符串是值而不是对象。所以，就像数值或布尔值，一个字符串不会从</span><span
lang=EN-US>weak tables</span><span style='font-family:宋体'>中被移除（除非它所关联的</span><span
lang=EN-US>vaule</span><span style='font-family:宋体'>被收集）。</span></p>


</div>
  <p></p>
  <hr class="moHR" />
  <span class="moCopyright">
    相关链接：
<br /><a href="_3.htm">lua程序设计目录</a> - <a href="http://www.luaer.cn">中国lua开发者</a> - <a href="http://bbs.luaer.cn">lua论坛</a> 
  </span><div id="bookfoot"></div>
<script language="JavaScript" src="js/ad.js"></script>
</body>

</html>

